// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Entity.proto

package com.randioo.mahjong_public_server.protocol;

public final class Entity {
  private Entity() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum GameOverMethod
      implements com.google.protobuf.ProtocolMessageEnum {
    GAME_OVER_TIME(0, 1),
    GAME_OVER_ROUND(1, 2),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static GameOverMethod valueOf(int value) {
      switch (value) {
        case 1: return GAME_OVER_TIME;
        case 2: return GAME_OVER_ROUND;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameOverMethod>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameOverMethod>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameOverMethod>() {
            public GameOverMethod findValueByNumber(int number) {
              return GameOverMethod.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final GameOverMethod[] VALUES = {
      GAME_OVER_TIME, GAME_OVER_ROUND, 
    };
    public static GameOverMethod valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private GameOverMethod(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      com.randioo.mahjong_public_server.protocol.Entity.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:com.randioo.mahjong_public_server.protocol.GameOverMethod)
  }
  
  public enum GameType
      implements com.google.protobuf.ProtocolMessageEnum {
    GAME_TYPE_MATCH(0, 1),
    GAME_TYPE_FRIEND(1, 2),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static GameType valueOf(int value) {
      switch (value) {
        case 1: return GAME_TYPE_MATCH;
        case 2: return GAME_TYPE_FRIEND;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameType>() {
            public GameType findValueByNumber(int number) {
              return GameType.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final GameType[] VALUES = {
      GAME_TYPE_MATCH, GAME_TYPE_FRIEND, 
    };
    public static GameType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private GameType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      com.randioo.mahjong_public_server.protocol.Entity.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:com.randioo.mahjong_public_server.protocol.GameType)
  }
  
  public enum GameState
      implements com.google.protobuf.ProtocolMessageEnum {
    GAME_STATE_PREPARE(0, 1),
    GAME_START_START(1, 2),
    GAME_START_END(2, 3),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static GameState valueOf(int value) {
      switch (value) {
        case 1: return GAME_STATE_PREPARE;
        case 2: return GAME_START_START;
        case 3: return GAME_START_END;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameState>() {
            public GameState findValueByNumber(int number) {
              return GameState.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.getDescriptor().getEnumTypes().get(2);
    }
    
    private static final GameState[] VALUES = {
      GAME_STATE_PREPARE, GAME_START_START, GAME_START_END, 
    };
    public static GameState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private GameState(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      com.randioo.mahjong_public_server.protocol.Entity.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:com.randioo.mahjong_public_server.protocol.GameState)
  }
  
  public enum CardListType
      implements com.google.protobuf.ProtocolMessageEnum {
    CARD_LIST_TYPE_CHI(0, 1),
    CARD_LIST_TYPE_PENG(1, 2),
    CARD_LIST_TYPE_GANG_LIGHT(2, 3),
    CARD_LIST_TYPE_GANG_DARK(3, 4),
    CARD_LIST_TYPE_GANG_ADD(4, 5),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static CardListType valueOf(int value) {
      switch (value) {
        case 1: return CARD_LIST_TYPE_CHI;
        case 2: return CARD_LIST_TYPE_PENG;
        case 3: return CARD_LIST_TYPE_GANG_LIGHT;
        case 4: return CARD_LIST_TYPE_GANG_DARK;
        case 5: return CARD_LIST_TYPE_GANG_ADD;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<CardListType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CardListType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CardListType>() {
            public CardListType findValueByNumber(int number) {
              return CardListType.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.getDescriptor().getEnumTypes().get(3);
    }
    
    private static final CardListType[] VALUES = {
      CARD_LIST_TYPE_CHI, CARD_LIST_TYPE_PENG, CARD_LIST_TYPE_GANG_LIGHT, CARD_LIST_TYPE_GANG_DARK, CARD_LIST_TYPE_GANG_ADD, 
    };
    public static CardListType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private CardListType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      com.randioo.mahjong_public_server.protocol.Entity.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:com.randioo.mahjong_public_server.protocol.CardListType)
  }
  
  public enum OverMethod
      implements com.google.protobuf.ProtocolMessageEnum {
    OVER_LOSS(0, 0),
    OVER_CHONG(1, 1),
    OVER_MO_HU(2, 2),
    OVER_HU(3, 3),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static OverMethod valueOf(int value) {
      switch (value) {
        case 0: return OVER_LOSS;
        case 1: return OVER_CHONG;
        case 2: return OVER_MO_HU;
        case 3: return OVER_HU;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<OverMethod>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<OverMethod>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OverMethod>() {
            public OverMethod findValueByNumber(int number) {
              return OverMethod.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.getDescriptor().getEnumTypes().get(4);
    }
    
    private static final OverMethod[] VALUES = {
      OVER_LOSS, OVER_CHONG, OVER_MO_HU, OVER_HU, 
    };
    public static OverMethod valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private OverMethod(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      com.randioo.mahjong_public_server.protocol.Entity.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:com.randioo.mahjong_public_server.protocol.OverMethod)
  }
  
  public enum FightVoteApplyExit
      implements com.google.protobuf.ProtocolMessageEnum {
    VOTE_IDLE(0, 0),
    VOTE_AGREE(1, 1),
    VOTE_REJECT(2, 2),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static FightVoteApplyExit valueOf(int value) {
      switch (value) {
        case 0: return VOTE_IDLE;
        case 1: return VOTE_AGREE;
        case 2: return VOTE_REJECT;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<FightVoteApplyExit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FightVoteApplyExit>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FightVoteApplyExit>() {
            public FightVoteApplyExit findValueByNumber(int number) {
              return FightVoteApplyExit.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.getDescriptor().getEnumTypes().get(5);
    }
    
    private static final FightVoteApplyExit[] VALUES = {
      VOTE_IDLE, VOTE_AGREE, VOTE_REJECT, 
    };
    public static FightVoteApplyExit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private FightVoteApplyExit(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      com.randioo.mahjong_public_server.protocol.Entity.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:com.randioo.mahjong_public_server.protocol.FightVoteApplyExit)
  }
  
  public static final class RoleData extends
      com.google.protobuf.GeneratedMessage {
    // Use RoleData.newBuilder() to construct.
    private RoleData() {
      initFields();
    }
    private RoleData(boolean noInit) {}
    
    private static final RoleData defaultInstance;
    public static RoleData getDefaultInstance() {
      return defaultInstance;
    }
    
    public RoleData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoleData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoleData_fieldAccessorTable;
    }
    
    // optional int32 roleId = 1;
    public static final int ROLEID_FIELD_NUMBER = 1;
    private boolean hasRoleId;
    private int roleId_ = 0;
    public boolean hasRoleId() { return hasRoleId; }
    public int getRoleId() { return roleId_; }
    
    // optional string roomId = 2;
    public static final int ROOMID_FIELD_NUMBER = 2;
    private boolean hasRoomId;
    private java.lang.String roomId_ = "";
    public boolean hasRoomId() { return hasRoomId; }
    public java.lang.String getRoomId() { return roomId_; }
    
    // optional int32 point = 3;
    public static final int POINT_FIELD_NUMBER = 3;
    private boolean hasPoint;
    private int point_ = 0;
    public boolean hasPoint() { return hasPoint; }
    public int getPoint() { return point_; }
    
    // optional int32 sex = 4;
    public static final int SEX_FIELD_NUMBER = 4;
    private boolean hasSex;
    private int sex_ = 0;
    public boolean hasSex() { return hasSex; }
    public int getSex() { return sex_; }
    
    // optional int32 serverTime = 5;
    public static final int SERVERTIME_FIELD_NUMBER = 5;
    private boolean hasServerTime;
    private int serverTime_ = 0;
    public boolean hasServerTime() { return hasServerTime; }
    public int getServerTime() { return serverTime_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasRoleId()) {
        output.writeInt32(1, getRoleId());
      }
      if (hasRoomId()) {
        output.writeString(2, getRoomId());
      }
      if (hasPoint()) {
        output.writeInt32(3, getPoint());
      }
      if (hasSex()) {
        output.writeInt32(4, getSex());
      }
      if (hasServerTime()) {
        output.writeInt32(5, getServerTime());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasRoleId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getRoleId());
      }
      if (hasRoomId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getRoomId());
      }
      if (hasPoint()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getPoint());
      }
      if (hasSex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getSex());
      }
      if (hasServerTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getServerTime());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.RoleData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.RoleData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.RoleData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.RoleData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.RoleData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.RoleData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoleData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoleData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoleData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoleData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.RoleData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoleData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.RoleData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.RoleData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.RoleData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.RoleData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.RoleData.getDefaultInstance()) return this;
        if (other.hasRoleId()) {
          setRoleId(other.getRoleId());
        }
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasPoint()) {
          setPoint(other.getPoint());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasServerTime()) {
          setServerTime(other.getServerTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setRoleId(input.readInt32());
              break;
            }
            case 18: {
              setRoomId(input.readString());
              break;
            }
            case 24: {
              setPoint(input.readInt32());
              break;
            }
            case 32: {
              setSex(input.readInt32());
              break;
            }
            case 40: {
              setServerTime(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 roleId = 1;
      public boolean hasRoleId() {
        return result.hasRoleId();
      }
      public int getRoleId() {
        return result.getRoleId();
      }
      public Builder setRoleId(int value) {
        result.hasRoleId = true;
        result.roleId_ = value;
        return this;
      }
      public Builder clearRoleId() {
        result.hasRoleId = false;
        result.roleId_ = 0;
        return this;
      }
      
      // optional string roomId = 2;
      public boolean hasRoomId() {
        return result.hasRoomId();
      }
      public java.lang.String getRoomId() {
        return result.getRoomId();
      }
      public Builder setRoomId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder clearRoomId() {
        result.hasRoomId = false;
        result.roomId_ = getDefaultInstance().getRoomId();
        return this;
      }
      
      // optional int32 point = 3;
      public boolean hasPoint() {
        return result.hasPoint();
      }
      public int getPoint() {
        return result.getPoint();
      }
      public Builder setPoint(int value) {
        result.hasPoint = true;
        result.point_ = value;
        return this;
      }
      public Builder clearPoint() {
        result.hasPoint = false;
        result.point_ = 0;
        return this;
      }
      
      // optional int32 sex = 4;
      public boolean hasSex() {
        return result.hasSex();
      }
      public int getSex() {
        return result.getSex();
      }
      public Builder setSex(int value) {
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder clearSex() {
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      // optional int32 serverTime = 5;
      public boolean hasServerTime() {
        return result.hasServerTime();
      }
      public int getServerTime() {
        return result.getServerTime();
      }
      public Builder setServerTime(int value) {
        result.hasServerTime = true;
        result.serverTime_ = value;
        return this;
      }
      public Builder clearServerTime() {
        result.hasServerTime = false;
        result.serverTime_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.RoleData)
    }
    
    static {
      defaultInstance = new RoleData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.RoleData)
  }
  
  public static final class GameConfigData extends
      com.google.protobuf.GeneratedMessage {
    // Use GameConfigData.newBuilder() to construct.
    private GameConfigData() {
      initFields();
    }
    private GameConfigData(boolean noInit) {}
    
    private static final GameConfigData defaultInstance;
    public static GameConfigData getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameConfigData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameConfigData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameConfigData_fieldAccessorTable;
    }
    
    // optional int32 raceType = 1;
    public static final int RACETYPE_FIELD_NUMBER = 1;
    private boolean hasRaceType;
    private int raceType_ = 0;
    public boolean hasRaceType() { return hasRaceType; }
    public int getRaceType() { return raceType_; }
    
    // optional int32 roundCount = 2;
    public static final int ROUNDCOUNT_FIELD_NUMBER = 2;
    private boolean hasRoundCount;
    private int roundCount_ = 0;
    public boolean hasRoundCount() { return hasRoundCount; }
    public int getRoundCount() { return roundCount_; }
    
    // optional int32 minStartScore = 3;
    public static final int MINSTARTSCORE_FIELD_NUMBER = 3;
    private boolean hasMinStartScore;
    private int minStartScore_ = 0;
    public boolean hasMinStartScore() { return hasMinStartScore; }
    public int getMinStartScore() { return minStartScore_; }
    
    // optional int32 hua = 4;
    public static final int HUA_FIELD_NUMBER = 4;
    private boolean hasHua;
    private int hua_ = 0;
    public boolean hasHua() { return hasHua; }
    public int getHua() { return hua_; }
    
    // optional int32 gangScore = 5;
    public static final int GANGSCORE_FIELD_NUMBER = 5;
    private boolean hasGangScore;
    private int gangScore_ = 0;
    public boolean hasGangScore() { return hasGangScore; }
    public int getGangScore() { return gangScore_; }
    
    // optional bool baidaZhuaHu = 6;
    public static final int BAIDAZHUAHU_FIELD_NUMBER = 6;
    private boolean hasBaidaZhuaHu;
    private boolean baidaZhuaHu_ = false;
    public boolean hasBaidaZhuaHu() { return hasBaidaZhuaHu; }
    public boolean getBaidaZhuaHu() { return baidaZhuaHu_; }
    
    // optional bool baida4win = 7;
    public static final int BAIDA4WIN_FIELD_NUMBER = 7;
    private boolean hasBaida4Win;
    private boolean baida4Win_ = false;
    public boolean hasBaida4Win() { return hasBaida4Win; }
    public boolean getBaida4Win() { return baida4Win_; }
    
    // optional int32 flyCount = 8;
    public static final int FLYCOUNT_FIELD_NUMBER = 8;
    private boolean hasFlyCount;
    private int flyCount_ = 0;
    public boolean hasFlyCount() { return hasFlyCount; }
    public int getFlyCount() { return flyCount_; }
    
    // optional int32 limit = 9;
    public static final int LIMIT_FIELD_NUMBER = 9;
    private boolean hasLimit;
    private int limit_ = 0;
    public boolean hasLimit() { return hasLimit; }
    public int getLimit() { return limit_; }
    
    // optional bool isHuangFan = 10;
    public static final int ISHUANGFAN_FIELD_NUMBER = 10;
    private boolean hasIsHuangFan;
    private boolean isHuangFan_ = false;
    public boolean hasIsHuangFan() { return hasIsHuangFan; }
    public boolean getIsHuangFan() { return isHuangFan_; }
    
    // optional bool isFly = 11;
    public static final int ISFLY_FIELD_NUMBER = 11;
    private boolean hasIsFly;
    private boolean isFly_ = false;
    public boolean hasIsFly() { return hasIsFly; }
    public boolean getIsFly() { return isFly_; }
    
    // optional int32 flyScore = 12;
    public static final int FLYSCORE_FIELD_NUMBER = 12;
    private boolean hasFlyScore;
    private int flyScore_ = 0;
    public boolean hasFlyScore() { return hasFlyScore; }
    public int getFlyScore() { return flyScore_; }
    
    // repeated int32 flyValue = 13;
    public static final int FLYVALUE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> flyValue_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getFlyValueList() {
      return flyValue_;
    }
    public int getFlyValueCount() { return flyValue_.size(); }
    public int getFlyValue(int index) {
      return flyValue_.get(index);
    }
    
    // optional .com.randioo.mahjong_public_server.protocol.GameOverMethod gameOverMethod = 14 [default = GAME_OVER_ROUND];
    public static final int GAMEOVERMETHOD_FIELD_NUMBER = 14;
    private boolean hasGameOverMethod;
    private com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod gameOverMethod_;
    public boolean hasGameOverMethod() { return hasGameOverMethod; }
    public com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod getGameOverMethod() { return gameOverMethod_; }
    
    // optional string endTime = 15;
    public static final int ENDTIME_FIELD_NUMBER = 15;
    private boolean hasEndTime;
    private java.lang.String endTime_ = "";
    public boolean hasEndTime() { return hasEndTime; }
    public java.lang.String getEndTime() { return endTime_; }
    
    // optional int32 cardNum = 16;
    public static final int CARDNUM_FIELD_NUMBER = 16;
    private boolean hasCardNum;
    private int cardNum_ = 0;
    public boolean hasCardNum() { return hasCardNum; }
    public int getCardNum() { return cardNum_; }
    
    // optional int32 maxCount = 17 [default = 4];
    public static final int MAXCOUNT_FIELD_NUMBER = 17;
    private boolean hasMaxCount;
    private int maxCount_ = 4;
    public boolean hasMaxCount() { return hasMaxCount; }
    public int getMaxCount() { return maxCount_; }
    
    // optional int32 roomCard = 18;
    public static final int ROOMCARD_FIELD_NUMBER = 18;
    private boolean hasRoomCard;
    private int roomCard_ = 0;
    public boolean hasRoomCard() { return hasRoomCard; }
    public int getRoomCard() { return roomCard_; }
    
    private void initFields() {
      gameOverMethod_ = com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod.GAME_OVER_ROUND;
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasRaceType()) {
        output.writeInt32(1, getRaceType());
      }
      if (hasRoundCount()) {
        output.writeInt32(2, getRoundCount());
      }
      if (hasMinStartScore()) {
        output.writeInt32(3, getMinStartScore());
      }
      if (hasHua()) {
        output.writeInt32(4, getHua());
      }
      if (hasGangScore()) {
        output.writeInt32(5, getGangScore());
      }
      if (hasBaidaZhuaHu()) {
        output.writeBool(6, getBaidaZhuaHu());
      }
      if (hasBaida4Win()) {
        output.writeBool(7, getBaida4Win());
      }
      if (hasFlyCount()) {
        output.writeInt32(8, getFlyCount());
      }
      if (hasLimit()) {
        output.writeInt32(9, getLimit());
      }
      if (hasIsHuangFan()) {
        output.writeBool(10, getIsHuangFan());
      }
      if (hasIsFly()) {
        output.writeBool(11, getIsFly());
      }
      if (hasFlyScore()) {
        output.writeInt32(12, getFlyScore());
      }
      for (int element : getFlyValueList()) {
        output.writeInt32(13, element);
      }
      if (hasGameOverMethod()) {
        output.writeEnum(14, getGameOverMethod().getNumber());
      }
      if (hasEndTime()) {
        output.writeString(15, getEndTime());
      }
      if (hasCardNum()) {
        output.writeInt32(16, getCardNum());
      }
      if (hasMaxCount()) {
        output.writeInt32(17, getMaxCount());
      }
      if (hasRoomCard()) {
        output.writeInt32(18, getRoomCard());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasRaceType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getRaceType());
      }
      if (hasRoundCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getRoundCount());
      }
      if (hasMinStartScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getMinStartScore());
      }
      if (hasHua()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getHua());
      }
      if (hasGangScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getGangScore());
      }
      if (hasBaidaZhuaHu()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, getBaidaZhuaHu());
      }
      if (hasBaida4Win()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, getBaida4Win());
      }
      if (hasFlyCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getFlyCount());
      }
      if (hasLimit()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getLimit());
      }
      if (hasIsHuangFan()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, getIsHuangFan());
      }
      if (hasIsFly()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, getIsFly());
      }
      if (hasFlyScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, getFlyScore());
      }
      {
        int dataSize = 0;
        for (int element : getFlyValueList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFlyValueList().size();
      }
      if (hasGameOverMethod()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, getGameOverMethod().getNumber());
      }
      if (hasEndTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(15, getEndTime());
      }
      if (hasCardNum()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, getCardNum());
      }
      if (hasMaxCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, getMaxCount());
      }
      if (hasRoomCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, getRoomCard());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameConfigData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.GameConfigData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.GameConfigData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.GameConfigData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.GameConfigData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameConfigData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameConfigData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.GameConfigData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameConfigData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.flyValue_ != java.util.Collections.EMPTY_LIST) {
          result.flyValue_ =
            java.util.Collections.unmodifiableList(result.flyValue_);
        }
        com.randioo.mahjong_public_server.protocol.Entity.GameConfigData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.GameConfigData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.GameConfigData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance()) return this;
        if (other.hasRaceType()) {
          setRaceType(other.getRaceType());
        }
        if (other.hasRoundCount()) {
          setRoundCount(other.getRoundCount());
        }
        if (other.hasMinStartScore()) {
          setMinStartScore(other.getMinStartScore());
        }
        if (other.hasHua()) {
          setHua(other.getHua());
        }
        if (other.hasGangScore()) {
          setGangScore(other.getGangScore());
        }
        if (other.hasBaidaZhuaHu()) {
          setBaidaZhuaHu(other.getBaidaZhuaHu());
        }
        if (other.hasBaida4Win()) {
          setBaida4Win(other.getBaida4Win());
        }
        if (other.hasFlyCount()) {
          setFlyCount(other.getFlyCount());
        }
        if (other.hasLimit()) {
          setLimit(other.getLimit());
        }
        if (other.hasIsHuangFan()) {
          setIsHuangFan(other.getIsHuangFan());
        }
        if (other.hasIsFly()) {
          setIsFly(other.getIsFly());
        }
        if (other.hasFlyScore()) {
          setFlyScore(other.getFlyScore());
        }
        if (!other.flyValue_.isEmpty()) {
          if (result.flyValue_.isEmpty()) {
            result.flyValue_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.flyValue_.addAll(other.flyValue_);
        }
        if (other.hasGameOverMethod()) {
          setGameOverMethod(other.getGameOverMethod());
        }
        if (other.hasEndTime()) {
          setEndTime(other.getEndTime());
        }
        if (other.hasCardNum()) {
          setCardNum(other.getCardNum());
        }
        if (other.hasMaxCount()) {
          setMaxCount(other.getMaxCount());
        }
        if (other.hasRoomCard()) {
          setRoomCard(other.getRoomCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setRaceType(input.readInt32());
              break;
            }
            case 16: {
              setRoundCount(input.readInt32());
              break;
            }
            case 24: {
              setMinStartScore(input.readInt32());
              break;
            }
            case 32: {
              setHua(input.readInt32());
              break;
            }
            case 40: {
              setGangScore(input.readInt32());
              break;
            }
            case 48: {
              setBaidaZhuaHu(input.readBool());
              break;
            }
            case 56: {
              setBaida4Win(input.readBool());
              break;
            }
            case 64: {
              setFlyCount(input.readInt32());
              break;
            }
            case 72: {
              setLimit(input.readInt32());
              break;
            }
            case 80: {
              setIsHuangFan(input.readBool());
              break;
            }
            case 88: {
              setIsFly(input.readBool());
              break;
            }
            case 96: {
              setFlyScore(input.readInt32());
              break;
            }
            case 104: {
              addFlyValue(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addFlyValue(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              int rawValue = input.readEnum();
              com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod value = com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(14, rawValue);
              } else {
                setGameOverMethod(value);
              }
              break;
            }
            case 122: {
              setEndTime(input.readString());
              break;
            }
            case 128: {
              setCardNum(input.readInt32());
              break;
            }
            case 136: {
              setMaxCount(input.readInt32());
              break;
            }
            case 144: {
              setRoomCard(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 raceType = 1;
      public boolean hasRaceType() {
        return result.hasRaceType();
      }
      public int getRaceType() {
        return result.getRaceType();
      }
      public Builder setRaceType(int value) {
        result.hasRaceType = true;
        result.raceType_ = value;
        return this;
      }
      public Builder clearRaceType() {
        result.hasRaceType = false;
        result.raceType_ = 0;
        return this;
      }
      
      // optional int32 roundCount = 2;
      public boolean hasRoundCount() {
        return result.hasRoundCount();
      }
      public int getRoundCount() {
        return result.getRoundCount();
      }
      public Builder setRoundCount(int value) {
        result.hasRoundCount = true;
        result.roundCount_ = value;
        return this;
      }
      public Builder clearRoundCount() {
        result.hasRoundCount = false;
        result.roundCount_ = 0;
        return this;
      }
      
      // optional int32 minStartScore = 3;
      public boolean hasMinStartScore() {
        return result.hasMinStartScore();
      }
      public int getMinStartScore() {
        return result.getMinStartScore();
      }
      public Builder setMinStartScore(int value) {
        result.hasMinStartScore = true;
        result.minStartScore_ = value;
        return this;
      }
      public Builder clearMinStartScore() {
        result.hasMinStartScore = false;
        result.minStartScore_ = 0;
        return this;
      }
      
      // optional int32 hua = 4;
      public boolean hasHua() {
        return result.hasHua();
      }
      public int getHua() {
        return result.getHua();
      }
      public Builder setHua(int value) {
        result.hasHua = true;
        result.hua_ = value;
        return this;
      }
      public Builder clearHua() {
        result.hasHua = false;
        result.hua_ = 0;
        return this;
      }
      
      // optional int32 gangScore = 5;
      public boolean hasGangScore() {
        return result.hasGangScore();
      }
      public int getGangScore() {
        return result.getGangScore();
      }
      public Builder setGangScore(int value) {
        result.hasGangScore = true;
        result.gangScore_ = value;
        return this;
      }
      public Builder clearGangScore() {
        result.hasGangScore = false;
        result.gangScore_ = 0;
        return this;
      }
      
      // optional bool baidaZhuaHu = 6;
      public boolean hasBaidaZhuaHu() {
        return result.hasBaidaZhuaHu();
      }
      public boolean getBaidaZhuaHu() {
        return result.getBaidaZhuaHu();
      }
      public Builder setBaidaZhuaHu(boolean value) {
        result.hasBaidaZhuaHu = true;
        result.baidaZhuaHu_ = value;
        return this;
      }
      public Builder clearBaidaZhuaHu() {
        result.hasBaidaZhuaHu = false;
        result.baidaZhuaHu_ = false;
        return this;
      }
      
      // optional bool baida4win = 7;
      public boolean hasBaida4Win() {
        return result.hasBaida4Win();
      }
      public boolean getBaida4Win() {
        return result.getBaida4Win();
      }
      public Builder setBaida4Win(boolean value) {
        result.hasBaida4Win = true;
        result.baida4Win_ = value;
        return this;
      }
      public Builder clearBaida4Win() {
        result.hasBaida4Win = false;
        result.baida4Win_ = false;
        return this;
      }
      
      // optional int32 flyCount = 8;
      public boolean hasFlyCount() {
        return result.hasFlyCount();
      }
      public int getFlyCount() {
        return result.getFlyCount();
      }
      public Builder setFlyCount(int value) {
        result.hasFlyCount = true;
        result.flyCount_ = value;
        return this;
      }
      public Builder clearFlyCount() {
        result.hasFlyCount = false;
        result.flyCount_ = 0;
        return this;
      }
      
      // optional int32 limit = 9;
      public boolean hasLimit() {
        return result.hasLimit();
      }
      public int getLimit() {
        return result.getLimit();
      }
      public Builder setLimit(int value) {
        result.hasLimit = true;
        result.limit_ = value;
        return this;
      }
      public Builder clearLimit() {
        result.hasLimit = false;
        result.limit_ = 0;
        return this;
      }
      
      // optional bool isHuangFan = 10;
      public boolean hasIsHuangFan() {
        return result.hasIsHuangFan();
      }
      public boolean getIsHuangFan() {
        return result.getIsHuangFan();
      }
      public Builder setIsHuangFan(boolean value) {
        result.hasIsHuangFan = true;
        result.isHuangFan_ = value;
        return this;
      }
      public Builder clearIsHuangFan() {
        result.hasIsHuangFan = false;
        result.isHuangFan_ = false;
        return this;
      }
      
      // optional bool isFly = 11;
      public boolean hasIsFly() {
        return result.hasIsFly();
      }
      public boolean getIsFly() {
        return result.getIsFly();
      }
      public Builder setIsFly(boolean value) {
        result.hasIsFly = true;
        result.isFly_ = value;
        return this;
      }
      public Builder clearIsFly() {
        result.hasIsFly = false;
        result.isFly_ = false;
        return this;
      }
      
      // optional int32 flyScore = 12;
      public boolean hasFlyScore() {
        return result.hasFlyScore();
      }
      public int getFlyScore() {
        return result.getFlyScore();
      }
      public Builder setFlyScore(int value) {
        result.hasFlyScore = true;
        result.flyScore_ = value;
        return this;
      }
      public Builder clearFlyScore() {
        result.hasFlyScore = false;
        result.flyScore_ = 0;
        return this;
      }
      
      // repeated int32 flyValue = 13;
      public java.util.List<java.lang.Integer> getFlyValueList() {
        return java.util.Collections.unmodifiableList(result.flyValue_);
      }
      public int getFlyValueCount() {
        return result.getFlyValueCount();
      }
      public int getFlyValue(int index) {
        return result.getFlyValue(index);
      }
      public Builder setFlyValue(int index, int value) {
        result.flyValue_.set(index, value);
        return this;
      }
      public Builder addFlyValue(int value) {
        if (result.flyValue_.isEmpty()) {
          result.flyValue_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.flyValue_.add(value);
        return this;
      }
      public Builder addAllFlyValue(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.flyValue_.isEmpty()) {
          result.flyValue_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.flyValue_);
        return this;
      }
      public Builder clearFlyValue() {
        result.flyValue_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.GameOverMethod gameOverMethod = 14 [default = GAME_OVER_ROUND];
      public boolean hasGameOverMethod() {
        return result.hasGameOverMethod();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod getGameOverMethod() {
        return result.getGameOverMethod();
      }
      public Builder setGameOverMethod(com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGameOverMethod = true;
        result.gameOverMethod_ = value;
        return this;
      }
      public Builder clearGameOverMethod() {
        result.hasGameOverMethod = false;
        result.gameOverMethod_ = com.randioo.mahjong_public_server.protocol.Entity.GameOverMethod.GAME_OVER_ROUND;
        return this;
      }
      
      // optional string endTime = 15;
      public boolean hasEndTime() {
        return result.hasEndTime();
      }
      public java.lang.String getEndTime() {
        return result.getEndTime();
      }
      public Builder setEndTime(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder clearEndTime() {
        result.hasEndTime = false;
        result.endTime_ = getDefaultInstance().getEndTime();
        return this;
      }
      
      // optional int32 cardNum = 16;
      public boolean hasCardNum() {
        return result.hasCardNum();
      }
      public int getCardNum() {
        return result.getCardNum();
      }
      public Builder setCardNum(int value) {
        result.hasCardNum = true;
        result.cardNum_ = value;
        return this;
      }
      public Builder clearCardNum() {
        result.hasCardNum = false;
        result.cardNum_ = 0;
        return this;
      }
      
      // optional int32 maxCount = 17 [default = 4];
      public boolean hasMaxCount() {
        return result.hasMaxCount();
      }
      public int getMaxCount() {
        return result.getMaxCount();
      }
      public Builder setMaxCount(int value) {
        result.hasMaxCount = true;
        result.maxCount_ = value;
        return this;
      }
      public Builder clearMaxCount() {
        result.hasMaxCount = false;
        result.maxCount_ = 4;
        return this;
      }
      
      // optional int32 roomCard = 18;
      public boolean hasRoomCard() {
        return result.hasRoomCard();
      }
      public int getRoomCard() {
        return result.getRoomCard();
      }
      public Builder setRoomCard(int value) {
        result.hasRoomCard = true;
        result.roomCard_ = value;
        return this;
      }
      public Builder clearRoomCard() {
        result.hasRoomCard = false;
        result.roomCard_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.GameConfigData)
    }
    
    static {
      defaultInstance = new GameConfigData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.GameConfigData)
  }
  
  public static final class PaiNum extends
      com.google.protobuf.GeneratedMessage {
    // Use PaiNum.newBuilder() to construct.
    private PaiNum() {
      initFields();
    }
    private PaiNum(boolean noInit) {}
    
    private static final PaiNum defaultInstance;
    public static PaiNum getDefaultInstance() {
      return defaultInstance;
    }
    
    public PaiNum getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_PaiNum_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_PaiNum_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional int32 num = 3;
    public static final int NUM_FIELD_NUMBER = 3;
    private boolean hasNum;
    private int num_ = 0;
    public boolean hasNum() { return hasNum; }
    public int getNum() { return num_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      if (hasNum()) {
        output.writeInt32(3, getNum());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      if (hasNum()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getNum());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.PaiNum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.PaiNum prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.PaiNum result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.PaiNum.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.PaiNum();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.PaiNum internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.PaiNum();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.PaiNum.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.PaiNum getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.PaiNum.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.PaiNum build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.PaiNum buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.PaiNum buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.PaiNum returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.PaiNum) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.PaiNum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.PaiNum other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.PaiNum.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasNum()) {
          setNum(other.getNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
            case 24: {
              setNum(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional int32 num = 3;
      public boolean hasNum() {
        return result.hasNum();
      }
      public int getNum() {
        return result.getNum();
      }
      public Builder setNum(int value) {
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder clearNum() {
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.PaiNum)
    }
    
    static {
      defaultInstance = new PaiNum(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.PaiNum)
  }
  
  public static final class ScoreData extends
      com.google.protobuf.GeneratedMessage {
    // Use ScoreData.newBuilder() to construct.
    private ScoreData() {
      initFields();
    }
    private ScoreData(boolean noInit) {}
    
    private static final ScoreData defaultInstance;
    public static ScoreData getDefaultInstance() {
      return defaultInstance;
    }
    
    public ScoreData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_ScoreData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_ScoreData_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional int32 score = 2;
    public static final int SCORE_FIELD_NUMBER = 2;
    private boolean hasScore;
    private int score_ = 0;
    public boolean hasScore() { return hasScore; }
    public int getScore() { return score_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      if (hasScore()) {
        output.writeInt32(2, getScore());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      if (hasScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getScore());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.ScoreData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.ScoreData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.ScoreData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.ScoreData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.ScoreData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.ScoreData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.ScoreData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.ScoreData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.ScoreData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.ScoreData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.ScoreData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.ScoreData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.ScoreData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.ScoreData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.ScoreData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.ScoreData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.ScoreData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.ScoreData.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
            case 16: {
              setScore(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional int32 score = 2;
      public boolean hasScore() {
        return result.hasScore();
      }
      public int getScore() {
        return result.getScore();
      }
      public Builder setScore(int value) {
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder clearScore() {
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.ScoreData)
    }
    
    static {
      defaultInstance = new ScoreData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.ScoreData)
  }
  
  public static final class Record extends
      com.google.protobuf.GeneratedMessage {
    // Use Record.newBuilder() to construct.
    private Record() {
      initFields();
    }
    private Record(boolean noInit) {}
    
    private static final Record defaultInstance;
    public static Record getDefaultInstance() {
      return defaultInstance;
    }
    
    public Record getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_Record_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_Record_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // repeated int32 pai = 2;
    public static final int PAI_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> pai_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getPaiList() {
      return pai_;
    }
    public int getPaiCount() { return pai_.size(); }
    public int getPai(int index) {
      return pai_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      for (int element : getPaiList()) {
        output.writeInt32(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      {
        int dataSize = 0;
        for (int element : getPaiList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getPaiList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.Record parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.Record prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.Record result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.Record.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.Record();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.Record internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.Record();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.Record.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.Record getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.Record.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.Record build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.Record buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.Record buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.pai_ != java.util.Collections.EMPTY_LIST) {
          result.pai_ =
            java.util.Collections.unmodifiableList(result.pai_);
        }
        com.randioo.mahjong_public_server.protocol.Entity.Record returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.Record) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.Record)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.Record other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.Record.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (!other.pai_.isEmpty()) {
          if (result.pai_.isEmpty()) {
            result.pai_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.pai_.addAll(other.pai_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
            case 16: {
              addPai(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addPai(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // repeated int32 pai = 2;
      public java.util.List<java.lang.Integer> getPaiList() {
        return java.util.Collections.unmodifiableList(result.pai_);
      }
      public int getPaiCount() {
        return result.getPaiCount();
      }
      public int getPai(int index) {
        return result.getPai(index);
      }
      public Builder setPai(int index, int value) {
        result.pai_.set(index, value);
        return this;
      }
      public Builder addPai(int value) {
        if (result.pai_.isEmpty()) {
          result.pai_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.pai_.add(value);
        return this;
      }
      public Builder addAllPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.pai_.isEmpty()) {
          result.pai_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.pai_);
        return this;
      }
      public Builder clearPai() {
        result.pai_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.Record)
    }
    
    static {
      defaultInstance = new Record(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.Record)
  }
  
  public static final class GameRoleData extends
      com.google.protobuf.GeneratedMessage {
    // Use GameRoleData.newBuilder() to construct.
    private GameRoleData() {
      initFields();
    }
    private GameRoleData(boolean noInit) {}
    
    private static final GameRoleData defaultInstance;
    public static GameRoleData getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameRoleData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameRoleData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameRoleData_fieldAccessorTable;
    }
    
    // optional string gameRoleId = 1;
    public static final int GAMEROLEID_FIELD_NUMBER = 1;
    private boolean hasGameRoleId;
    private java.lang.String gameRoleId_ = "";
    public boolean hasGameRoleId() { return hasGameRoleId; }
    public java.lang.String getGameRoleId() { return gameRoleId_; }
    
    // optional string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional int32 seat = 3;
    public static final int SEAT_FIELD_NUMBER = 3;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional bool ready = 4;
    public static final int READY_FIELD_NUMBER = 4;
    private boolean hasReady;
    private boolean ready_ = false;
    public boolean hasReady() { return hasReady; }
    public boolean getReady() { return ready_; }
    
    // optional string headImgUrl = 5;
    public static final int HEADIMGURL_FIELD_NUMBER = 5;
    private boolean hasHeadImgUrl;
    private java.lang.String headImgUrl_ = "";
    public boolean hasHeadImgUrl() { return hasHeadImgUrl; }
    public java.lang.String getHeadImgUrl() { return headImgUrl_; }
    
    // optional int32 money = 6;
    public static final int MONEY_FIELD_NUMBER = 6;
    private boolean hasMoney;
    private int money_ = 0;
    public boolean hasMoney() { return hasMoney; }
    public int getMoney() { return money_; }
    
    // optional int32 point = 7;
    public static final int POINT_FIELD_NUMBER = 7;
    private boolean hasPoint;
    private int point_ = 0;
    public boolean hasPoint() { return hasPoint; }
    public int getPoint() { return point_; }
    
    // optional int32 sex = 8;
    public static final int SEX_FIELD_NUMBER = 8;
    private boolean hasSex;
    private int sex_ = 0;
    public boolean hasSex() { return hasSex; }
    public int getSex() { return sex_; }
    
    // optional bool online = 9;
    public static final int ONLINE_FIELD_NUMBER = 9;
    private boolean hasOnline;
    private boolean online_ = false;
    public boolean hasOnline() { return hasOnline; }
    public boolean getOnline() { return online_; }
    
    // optional string platformRoleId = 10;
    public static final int PLATFORMROLEID_FIELD_NUMBER = 10;
    private boolean hasPlatformRoleId;
    private java.lang.String platformRoleId_ = "";
    public boolean hasPlatformRoleId() { return hasPlatformRoleId; }
    public java.lang.String getPlatformRoleId() { return platformRoleId_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasGameRoleId()) {
        output.writeString(1, getGameRoleId());
      }
      if (hasName()) {
        output.writeString(2, getName());
      }
      if (hasSeat()) {
        output.writeInt32(3, getSeat());
      }
      if (hasReady()) {
        output.writeBool(4, getReady());
      }
      if (hasHeadImgUrl()) {
        output.writeString(5, getHeadImgUrl());
      }
      if (hasMoney()) {
        output.writeInt32(6, getMoney());
      }
      if (hasPoint()) {
        output.writeInt32(7, getPoint());
      }
      if (hasSex()) {
        output.writeInt32(8, getSex());
      }
      if (hasOnline()) {
        output.writeBool(9, getOnline());
      }
      if (hasPlatformRoleId()) {
        output.writeString(10, getPlatformRoleId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasGameRoleId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getGameRoleId());
      }
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getSeat());
      }
      if (hasReady()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, getReady());
      }
      if (hasHeadImgUrl()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getHeadImgUrl());
      }
      if (hasMoney()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getMoney());
      }
      if (hasPoint()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getPoint());
      }
      if (hasSex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getSex());
      }
      if (hasOnline()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, getOnline());
      }
      if (hasPlatformRoleId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(10, getPlatformRoleId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameRoleData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.GameRoleData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.GameRoleData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.GameRoleData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.GameRoleData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.GameRoleData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.GameRoleData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.GameRoleData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.GameRoleData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance()) return this;
        if (other.hasGameRoleId()) {
          setGameRoleId(other.getGameRoleId());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasReady()) {
          setReady(other.getReady());
        }
        if (other.hasHeadImgUrl()) {
          setHeadImgUrl(other.getHeadImgUrl());
        }
        if (other.hasMoney()) {
          setMoney(other.getMoney());
        }
        if (other.hasPoint()) {
          setPoint(other.getPoint());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasOnline()) {
          setOnline(other.getOnline());
        }
        if (other.hasPlatformRoleId()) {
          setPlatformRoleId(other.getPlatformRoleId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setGameRoleId(input.readString());
              break;
            }
            case 18: {
              setName(input.readString());
              break;
            }
            case 24: {
              setSeat(input.readInt32());
              break;
            }
            case 32: {
              setReady(input.readBool());
              break;
            }
            case 42: {
              setHeadImgUrl(input.readString());
              break;
            }
            case 48: {
              setMoney(input.readInt32());
              break;
            }
            case 56: {
              setPoint(input.readInt32());
              break;
            }
            case 64: {
              setSex(input.readInt32());
              break;
            }
            case 72: {
              setOnline(input.readBool());
              break;
            }
            case 82: {
              setPlatformRoleId(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional string gameRoleId = 1;
      public boolean hasGameRoleId() {
        return result.hasGameRoleId();
      }
      public java.lang.String getGameRoleId() {
        return result.getGameRoleId();
      }
      public Builder setGameRoleId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasGameRoleId = true;
        result.gameRoleId_ = value;
        return this;
      }
      public Builder clearGameRoleId() {
        result.hasGameRoleId = false;
        result.gameRoleId_ = getDefaultInstance().getGameRoleId();
        return this;
      }
      
      // optional string name = 2;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional int32 seat = 3;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional bool ready = 4;
      public boolean hasReady() {
        return result.hasReady();
      }
      public boolean getReady() {
        return result.getReady();
      }
      public Builder setReady(boolean value) {
        result.hasReady = true;
        result.ready_ = value;
        return this;
      }
      public Builder clearReady() {
        result.hasReady = false;
        result.ready_ = false;
        return this;
      }
      
      // optional string headImgUrl = 5;
      public boolean hasHeadImgUrl() {
        return result.hasHeadImgUrl();
      }
      public java.lang.String getHeadImgUrl() {
        return result.getHeadImgUrl();
      }
      public Builder setHeadImgUrl(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasHeadImgUrl = true;
        result.headImgUrl_ = value;
        return this;
      }
      public Builder clearHeadImgUrl() {
        result.hasHeadImgUrl = false;
        result.headImgUrl_ = getDefaultInstance().getHeadImgUrl();
        return this;
      }
      
      // optional int32 money = 6;
      public boolean hasMoney() {
        return result.hasMoney();
      }
      public int getMoney() {
        return result.getMoney();
      }
      public Builder setMoney(int value) {
        result.hasMoney = true;
        result.money_ = value;
        return this;
      }
      public Builder clearMoney() {
        result.hasMoney = false;
        result.money_ = 0;
        return this;
      }
      
      // optional int32 point = 7;
      public boolean hasPoint() {
        return result.hasPoint();
      }
      public int getPoint() {
        return result.getPoint();
      }
      public Builder setPoint(int value) {
        result.hasPoint = true;
        result.point_ = value;
        return this;
      }
      public Builder clearPoint() {
        result.hasPoint = false;
        result.point_ = 0;
        return this;
      }
      
      // optional int32 sex = 8;
      public boolean hasSex() {
        return result.hasSex();
      }
      public int getSex() {
        return result.getSex();
      }
      public Builder setSex(int value) {
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder clearSex() {
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      // optional bool online = 9;
      public boolean hasOnline() {
        return result.hasOnline();
      }
      public boolean getOnline() {
        return result.getOnline();
      }
      public Builder setOnline(boolean value) {
        result.hasOnline = true;
        result.online_ = value;
        return this;
      }
      public Builder clearOnline() {
        result.hasOnline = false;
        result.online_ = false;
        return this;
      }
      
      // optional string platformRoleId = 10;
      public boolean hasPlatformRoleId() {
        return result.hasPlatformRoleId();
      }
      public java.lang.String getPlatformRoleId() {
        return result.getPlatformRoleId();
      }
      public Builder setPlatformRoleId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPlatformRoleId = true;
        result.platformRoleId_ = value;
        return this;
      }
      public Builder clearPlatformRoleId() {
        result.hasPlatformRoleId = false;
        result.platformRoleId_ = getDefaultInstance().getPlatformRoleId();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.GameRoleData)
    }
    
    static {
      defaultInstance = new GameRoleData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.GameRoleData)
  }
  
  public static final class CallCardListData extends
      com.google.protobuf.GeneratedMessage {
    // Use CallCardListData.newBuilder() to construct.
    private CallCardListData() {
      initFields();
    }
    private CallCardListData(boolean noInit) {}
    
    private static final CallCardListData defaultInstance;
    public static CallCardListData getDefaultInstance() {
      return defaultInstance;
    }
    
    public CallCardListData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_CallCardListData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_CallCardListData_fieldAccessorTable;
    }
    
    // optional int32 callId = 1;
    public static final int CALLID_FIELD_NUMBER = 1;
    private boolean hasCallId;
    private int callId_ = 0;
    public boolean hasCallId() { return hasCallId; }
    public int getCallId() { return callId_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.CardListData cardListData = 2;
    public static final int CARDLISTDATA_FIELD_NUMBER = 2;
    private boolean hasCardListData;
    private com.randioo.mahjong_public_server.protocol.Entity.CardListData cardListData_;
    public boolean hasCardListData() { return hasCardListData; }
    public com.randioo.mahjong_public_server.protocol.Entity.CardListData getCardListData() { return cardListData_; }
    
    private void initFields() {
      cardListData_ = com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCallId()) {
        output.writeInt32(1, getCallId());
      }
      if (hasCardListData()) {
        output.writeMessage(2, getCardListData());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCallId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getCallId());
      }
      if (hasCardListData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCardListData());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallCardListData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.CallCardListData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.CallCardListData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.CallCardListData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.CallCardListData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.CallCardListData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.CallCardListData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CallCardListData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.CallCardListData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.CallCardListData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.CallCardListData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.CallCardListData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.CallCardListData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.CallCardListData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.getDefaultInstance()) return this;
        if (other.hasCallId()) {
          setCallId(other.getCallId());
        }
        if (other.hasCardListData()) {
          mergeCardListData(other.getCardListData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCallId(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.CardListData.newBuilder();
              if (hasCardListData()) {
                subBuilder.mergeFrom(getCardListData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCardListData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 callId = 1;
      public boolean hasCallId() {
        return result.hasCallId();
      }
      public int getCallId() {
        return result.getCallId();
      }
      public Builder setCallId(int value) {
        result.hasCallId = true;
        result.callId_ = value;
        return this;
      }
      public Builder clearCallId() {
        result.hasCallId = false;
        result.callId_ = 0;
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.CardListData cardListData = 2;
      public boolean hasCardListData() {
        return result.hasCardListData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CardListData getCardListData() {
        return result.getCardListData();
      }
      public Builder setCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCardListData = true;
        result.cardListData_ = value;
        return this;
      }
      public Builder setCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder builderForValue) {
        result.hasCardListData = true;
        result.cardListData_ = builderForValue.build();
        return this;
      }
      public Builder mergeCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData value) {
        if (result.hasCardListData() &&
            result.cardListData_ != com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance()) {
          result.cardListData_ =
            com.randioo.mahjong_public_server.protocol.Entity.CardListData.newBuilder(result.cardListData_).mergeFrom(value).buildPartial();
        } else {
          result.cardListData_ = value;
        }
        result.hasCardListData = true;
        return this;
      }
      public Builder clearCardListData() {
        result.hasCardListData = false;
        result.cardListData_ = com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.CallCardListData)
    }
    
    static {
      defaultInstance = new CallCardListData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.CallCardListData)
  }
  
  public static final class CardListData extends
      com.google.protobuf.GeneratedMessage {
    // Use CardListData.newBuilder() to construct.
    private CardListData() {
      initFields();
    }
    private CardListData(boolean noInit) {}
    
    private static final CardListData defaultInstance;
    public static CardListData getDefaultInstance() {
      return defaultInstance;
    }
    
    public CardListData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_CardListData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_CardListData_fieldAccessorTable;
    }
    
    // optional .com.randioo.mahjong_public_server.protocol.CardListType cardListType = 1;
    public static final int CARDLISTTYPE_FIELD_NUMBER = 1;
    private boolean hasCardListType;
    private com.randioo.mahjong_public_server.protocol.Entity.CardListType cardListType_;
    public boolean hasCardListType() { return hasCardListType; }
    public com.randioo.mahjong_public_server.protocol.Entity.CardListType getCardListType() { return cardListType_; }
    
    // optional int32 card = 2;
    public static final int CARD_FIELD_NUMBER = 2;
    private boolean hasCard;
    private int card_ = 0;
    public boolean hasCard() { return hasCard; }
    public int getCard() { return card_; }
    
    // optional int32 targetSeat = 3;
    public static final int TARGETSEAT_FIELD_NUMBER = 3;
    private boolean hasTargetSeat;
    private int targetSeat_ = 0;
    public boolean hasTargetSeat() { return hasTargetSeat; }
    public int getTargetSeat() { return targetSeat_; }
    
    // optional int32 targetCard = 4;
    public static final int TARGETCARD_FIELD_NUMBER = 4;
    private boolean hasTargetCard;
    private int targetCard_ = 0;
    public boolean hasTargetCard() { return hasTargetCard; }
    public int getTargetCard() { return targetCard_; }
    
    private void initFields() {
      cardListType_ = com.randioo.mahjong_public_server.protocol.Entity.CardListType.CARD_LIST_TYPE_CHI;
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCardListType()) {
        output.writeEnum(1, getCardListType().getNumber());
      }
      if (hasCard()) {
        output.writeInt32(2, getCard());
      }
      if (hasTargetSeat()) {
        output.writeInt32(3, getTargetSeat());
      }
      if (hasTargetCard()) {
        output.writeInt32(4, getTargetCard());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCardListType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getCardListType().getNumber());
      }
      if (hasCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCard());
      }
      if (hasTargetSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getTargetSeat());
      }
      if (hasTargetCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getTargetCard());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CardListData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.CardListData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.CardListData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.CardListData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.CardListData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.CardListData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.CardListData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.CardListData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CardListData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.CardListData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.CardListData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.CardListData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.CardListData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.CardListData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.CardListData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance()) return this;
        if (other.hasCardListType()) {
          setCardListType(other.getCardListType());
        }
        if (other.hasCard()) {
          setCard(other.getCard());
        }
        if (other.hasTargetSeat()) {
          setTargetSeat(other.getTargetSeat());
        }
        if (other.hasTargetCard()) {
          setTargetCard(other.getTargetCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.randioo.mahjong_public_server.protocol.Entity.CardListType value = com.randioo.mahjong_public_server.protocol.Entity.CardListType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                setCardListType(value);
              }
              break;
            }
            case 16: {
              setCard(input.readInt32());
              break;
            }
            case 24: {
              setTargetSeat(input.readInt32());
              break;
            }
            case 32: {
              setTargetCard(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional .com.randioo.mahjong_public_server.protocol.CardListType cardListType = 1;
      public boolean hasCardListType() {
        return result.hasCardListType();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CardListType getCardListType() {
        return result.getCardListType();
      }
      public Builder setCardListType(com.randioo.mahjong_public_server.protocol.Entity.CardListType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCardListType = true;
        result.cardListType_ = value;
        return this;
      }
      public Builder clearCardListType() {
        result.hasCardListType = false;
        result.cardListType_ = com.randioo.mahjong_public_server.protocol.Entity.CardListType.CARD_LIST_TYPE_CHI;
        return this;
      }
      
      // optional int32 card = 2;
      public boolean hasCard() {
        return result.hasCard();
      }
      public int getCard() {
        return result.getCard();
      }
      public Builder setCard(int value) {
        result.hasCard = true;
        result.card_ = value;
        return this;
      }
      public Builder clearCard() {
        result.hasCard = false;
        result.card_ = 0;
        return this;
      }
      
      // optional int32 targetSeat = 3;
      public boolean hasTargetSeat() {
        return result.hasTargetSeat();
      }
      public int getTargetSeat() {
        return result.getTargetSeat();
      }
      public Builder setTargetSeat(int value) {
        result.hasTargetSeat = true;
        result.targetSeat_ = value;
        return this;
      }
      public Builder clearTargetSeat() {
        result.hasTargetSeat = false;
        result.targetSeat_ = 0;
        return this;
      }
      
      // optional int32 targetCard = 4;
      public boolean hasTargetCard() {
        return result.hasTargetCard();
      }
      public int getTargetCard() {
        return result.getTargetCard();
      }
      public Builder setTargetCard(int value) {
        result.hasTargetCard = true;
        result.targetCard_ = value;
        return this;
      }
      public Builder clearTargetCard() {
        result.hasTargetCard = false;
        result.targetCard_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.CardListData)
    }
    
    static {
      defaultInstance = new CardListData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.CardListData)
  }
  
  public static final class CallHuData extends
      com.google.protobuf.GeneratedMessage {
    // Use CallHuData.newBuilder() to construct.
    private CallHuData() {
      initFields();
    }
    private CallHuData(boolean noInit) {}
    
    private static final CallHuData defaultInstance;
    public static CallHuData getDefaultInstance() {
      return defaultInstance;
    }
    
    public CallHuData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_CallHuData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_CallHuData_fieldAccessorTable;
    }
    
    // optional int32 callId = 1;
    public static final int CALLID_FIELD_NUMBER = 1;
    private boolean hasCallId;
    private int callId_ = 0;
    public boolean hasCallId() { return hasCallId; }
    public int getCallId() { return callId_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoundCardsData huData = 2;
    public static final int HUDATA_FIELD_NUMBER = 2;
    private boolean hasHuData;
    private com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData huData_;
    public boolean hasHuData() { return hasHuData; }
    public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData getHuData() { return huData_; }
    
    private void initFields() {
      huData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCallId()) {
        output.writeInt32(1, getCallId());
      }
      if (hasHuData()) {
        output.writeMessage(2, getHuData());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCallId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getCallId());
      }
      if (hasHuData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getHuData());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.CallHuData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.CallHuData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.CallHuData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.CallHuData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.CallHuData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.CallHuData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.CallHuData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.CallHuData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.CallHuData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.CallHuData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CallHuData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.CallHuData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.CallHuData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.CallHuData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.CallHuData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.CallHuData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.CallHuData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.CallHuData.getDefaultInstance()) return this;
        if (other.hasCallId()) {
          setCallId(other.getCallId());
        }
        if (other.hasHuData()) {
          mergeHuData(other.getHuData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCallId(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.newBuilder();
              if (hasHuData()) {
                subBuilder.mergeFrom(getHuData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHuData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 callId = 1;
      public boolean hasCallId() {
        return result.hasCallId();
      }
      public int getCallId() {
        return result.getCallId();
      }
      public Builder setCallId(int value) {
        result.hasCallId = true;
        result.callId_ = value;
        return this;
      }
      public Builder clearCallId() {
        result.hasCallId = false;
        result.callId_ = 0;
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoundCardsData huData = 2;
      public boolean hasHuData() {
        return result.hasHuData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData getHuData() {
        return result.getHuData();
      }
      public Builder setHuData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHuData = true;
        result.huData_ = value;
        return this;
      }
      public Builder setHuData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.Builder builderForValue) {
        result.hasHuData = true;
        result.huData_ = builderForValue.build();
        return this;
      }
      public Builder mergeHuData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData value) {
        if (result.hasHuData() &&
            result.huData_ != com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance()) {
          result.huData_ =
            com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.newBuilder(result.huData_).mergeFrom(value).buildPartial();
        } else {
          result.huData_ = value;
        }
        result.hasHuData = true;
        return this;
      }
      public Builder clearHuData() {
        result.hasHuData = false;
        result.huData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.CallHuData)
    }
    
    static {
      defaultInstance = new CallHuData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.CallHuData)
  }
  
  public static final class RoleRoundOverInfoData extends
      com.google.protobuf.GeneratedMessage {
    // Use RoleRoundOverInfoData.newBuilder() to construct.
    private RoleRoundOverInfoData() {
      initFields();
    }
    private RoleRoundOverInfoData(boolean noInit) {}
    
    private static final RoleRoundOverInfoData defaultInstance;
    public static RoleRoundOverInfoData getDefaultInstance() {
      return defaultInstance;
    }
    
    public RoleRoundOverInfoData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoleRoundOverInfoData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoleRoundOverInfoData_fieldAccessorTable;
    }
    
    // optional .com.randioo.mahjong_public_server.protocol.GameRoleData gameRoleData = 1;
    public static final int GAMEROLEDATA_FIELD_NUMBER = 1;
    private boolean hasGameRoleData;
    private com.randioo.mahjong_public_server.protocol.Entity.GameRoleData gameRoleData_;
    public boolean hasGameRoleData() { return hasGameRoleData; }
    public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData getGameRoleData() { return gameRoleData_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoundCardsData roundCardsData = 2;
    public static final int ROUNDCARDSDATA_FIELD_NUMBER = 2;
    private boolean hasRoundCardsData;
    private com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData roundCardsData_;
    public boolean hasRoundCardsData() { return hasRoundCardsData; }
    public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData getRoundCardsData() { return roundCardsData_; }
    
    // optional int32 minScore = 3;
    public static final int MINSCORE_FIELD_NUMBER = 3;
    private boolean hasMinScore;
    private int minScore_ = 0;
    public boolean hasMinScore() { return hasMinScore; }
    public int getMinScore() { return minScore_; }
    
    // optional bool gangKai = 4;
    public static final int GANGKAI_FIELD_NUMBER = 4;
    private boolean hasGangKai;
    private boolean gangKai_ = false;
    public boolean hasGangKai() { return hasGangKai; }
    public boolean getGangKai() { return gangKai_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.OverMethod overMethod = 5;
    public static final int OVERMETHOD_FIELD_NUMBER = 5;
    private boolean hasOverMethod;
    private com.randioo.mahjong_public_server.protocol.Entity.OverMethod overMethod_;
    public boolean hasOverMethod() { return hasOverMethod; }
    public com.randioo.mahjong_public_server.protocol.Entity.OverMethod getOverMethod() { return overMethod_; }
    
    // optional int32 roundScore = 6;
    public static final int ROUNDSCORE_FIELD_NUMBER = 6;
    private boolean hasRoundScore;
    private int roundScore_ = 0;
    public boolean hasRoundScore() { return hasRoundScore; }
    public int getRoundScore() { return roundScore_; }
    
    // optional int32 mingGangScore = 7;
    public static final int MINGGANGSCORE_FIELD_NUMBER = 7;
    private boolean hasMingGangScore;
    private int mingGangScore_ = 0;
    public boolean hasMingGangScore() { return hasMingGangScore; }
    public int getMingGangScore() { return mingGangScore_; }
    
    // optional int32 mingGangCount = 8;
    public static final int MINGGANGCOUNT_FIELD_NUMBER = 8;
    private boolean hasMingGangCount;
    private int mingGangCount_ = 0;
    public boolean hasMingGangCount() { return hasMingGangCount; }
    public int getMingGangCount() { return mingGangCount_; }
    
    // optional int32 darkGangScore = 9;
    public static final int DARKGANGSCORE_FIELD_NUMBER = 9;
    private boolean hasDarkGangScore;
    private int darkGangScore_ = 0;
    public boolean hasDarkGangScore() { return hasDarkGangScore; }
    public int getDarkGangScore() { return darkGangScore_; }
    
    // optional int32 darkGangCount = 10;
    public static final int DARKGANGCOUNT_FIELD_NUMBER = 10;
    private boolean hasDarkGangCount;
    private int darkGangCount_ = 0;
    public boolean hasDarkGangCount() { return hasDarkGangCount; }
    public int getDarkGangCount() { return darkGangCount_; }
    
    // optional int32 huangFan = 11;
    public static final int HUANGFAN_FIELD_NUMBER = 11;
    private boolean hasHuangFan;
    private int huangFan_ = 0;
    public boolean hasHuangFan() { return hasHuangFan; }
    public int getHuangFan() { return huangFan_; }
    
    // optional int32 moScore = 12;
    public static final int MOSCORE_FIELD_NUMBER = 12;
    private boolean hasMoScore;
    private int moScore_ = 0;
    public boolean hasMoScore() { return hasMoScore; }
    public int getMoScore() { return moScore_; }
    
    private void initFields() {
      gameRoleData_ = com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance();
      roundCardsData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance();
      overMethod_ = com.randioo.mahjong_public_server.protocol.Entity.OverMethod.OVER_LOSS;
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasGameRoleData()) {
        output.writeMessage(1, getGameRoleData());
      }
      if (hasRoundCardsData()) {
        output.writeMessage(2, getRoundCardsData());
      }
      if (hasMinScore()) {
        output.writeInt32(3, getMinScore());
      }
      if (hasGangKai()) {
        output.writeBool(4, getGangKai());
      }
      if (hasOverMethod()) {
        output.writeEnum(5, getOverMethod().getNumber());
      }
      if (hasRoundScore()) {
        output.writeInt32(6, getRoundScore());
      }
      if (hasMingGangScore()) {
        output.writeInt32(7, getMingGangScore());
      }
      if (hasMingGangCount()) {
        output.writeInt32(8, getMingGangCount());
      }
      if (hasDarkGangScore()) {
        output.writeInt32(9, getDarkGangScore());
      }
      if (hasDarkGangCount()) {
        output.writeInt32(10, getDarkGangCount());
      }
      if (hasHuangFan()) {
        output.writeInt32(11, getHuangFan());
      }
      if (hasMoScore()) {
        output.writeInt32(12, getMoScore());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasGameRoleData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getGameRoleData());
      }
      if (hasRoundCardsData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRoundCardsData());
      }
      if (hasMinScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getMinScore());
      }
      if (hasGangKai()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, getGangKai());
      }
      if (hasOverMethod()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, getOverMethod().getNumber());
      }
      if (hasRoundScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getRoundScore());
      }
      if (hasMingGangScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getMingGangScore());
      }
      if (hasMingGangCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getMingGangCount());
      }
      if (hasDarkGangScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getDarkGangScore());
      }
      if (hasDarkGangCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, getDarkGangCount());
      }
      if (hasHuangFan()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, getHuangFan());
      }
      if (hasMoScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, getMoScore());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.getDefaultInstance()) return this;
        if (other.hasGameRoleData()) {
          mergeGameRoleData(other.getGameRoleData());
        }
        if (other.hasRoundCardsData()) {
          mergeRoundCardsData(other.getRoundCardsData());
        }
        if (other.hasMinScore()) {
          setMinScore(other.getMinScore());
        }
        if (other.hasGangKai()) {
          setGangKai(other.getGangKai());
        }
        if (other.hasOverMethod()) {
          setOverMethod(other.getOverMethod());
        }
        if (other.hasRoundScore()) {
          setRoundScore(other.getRoundScore());
        }
        if (other.hasMingGangScore()) {
          setMingGangScore(other.getMingGangScore());
        }
        if (other.hasMingGangCount()) {
          setMingGangCount(other.getMingGangCount());
        }
        if (other.hasDarkGangScore()) {
          setDarkGangScore(other.getDarkGangScore());
        }
        if (other.hasDarkGangCount()) {
          setDarkGangCount(other.getDarkGangCount());
        }
        if (other.hasHuangFan()) {
          setHuangFan(other.getHuangFan());
        }
        if (other.hasMoScore()) {
          setMoScore(other.getMoScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.newBuilder();
              if (hasGameRoleData()) {
                subBuilder.mergeFrom(getGameRoleData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameRoleData(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.newBuilder();
              if (hasRoundCardsData()) {
                subBuilder.mergeFrom(getRoundCardsData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoundCardsData(subBuilder.buildPartial());
              break;
            }
            case 24: {
              setMinScore(input.readInt32());
              break;
            }
            case 32: {
              setGangKai(input.readBool());
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.randioo.mahjong_public_server.protocol.Entity.OverMethod value = com.randioo.mahjong_public_server.protocol.Entity.OverMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                setOverMethod(value);
              }
              break;
            }
            case 48: {
              setRoundScore(input.readInt32());
              break;
            }
            case 56: {
              setMingGangScore(input.readInt32());
              break;
            }
            case 64: {
              setMingGangCount(input.readInt32());
              break;
            }
            case 72: {
              setDarkGangScore(input.readInt32());
              break;
            }
            case 80: {
              setDarkGangCount(input.readInt32());
              break;
            }
            case 88: {
              setHuangFan(input.readInt32());
              break;
            }
            case 96: {
              setMoScore(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional .com.randioo.mahjong_public_server.protocol.GameRoleData gameRoleData = 1;
      public boolean hasGameRoleData() {
        return result.hasGameRoleData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData getGameRoleData() {
        return result.getGameRoleData();
      }
      public Builder setGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGameRoleData = true;
        result.gameRoleData_ = value;
        return this;
      }
      public Builder setGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder builderForValue) {
        result.hasGameRoleData = true;
        result.gameRoleData_ = builderForValue.build();
        return this;
      }
      public Builder mergeGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData value) {
        if (result.hasGameRoleData() &&
            result.gameRoleData_ != com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance()) {
          result.gameRoleData_ =
            com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.newBuilder(result.gameRoleData_).mergeFrom(value).buildPartial();
        } else {
          result.gameRoleData_ = value;
        }
        result.hasGameRoleData = true;
        return this;
      }
      public Builder clearGameRoleData() {
        result.hasGameRoleData = false;
        result.gameRoleData_ = com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoundCardsData roundCardsData = 2;
      public boolean hasRoundCardsData() {
        return result.hasRoundCardsData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData getRoundCardsData() {
        return result.getRoundCardsData();
      }
      public Builder setRoundCardsData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoundCardsData = true;
        result.roundCardsData_ = value;
        return this;
      }
      public Builder setRoundCardsData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.Builder builderForValue) {
        result.hasRoundCardsData = true;
        result.roundCardsData_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoundCardsData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData value) {
        if (result.hasRoundCardsData() &&
            result.roundCardsData_ != com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance()) {
          result.roundCardsData_ =
            com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.newBuilder(result.roundCardsData_).mergeFrom(value).buildPartial();
        } else {
          result.roundCardsData_ = value;
        }
        result.hasRoundCardsData = true;
        return this;
      }
      public Builder clearRoundCardsData() {
        result.hasRoundCardsData = false;
        result.roundCardsData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance();
        return this;
      }
      
      // optional int32 minScore = 3;
      public boolean hasMinScore() {
        return result.hasMinScore();
      }
      public int getMinScore() {
        return result.getMinScore();
      }
      public Builder setMinScore(int value) {
        result.hasMinScore = true;
        result.minScore_ = value;
        return this;
      }
      public Builder clearMinScore() {
        result.hasMinScore = false;
        result.minScore_ = 0;
        return this;
      }
      
      // optional bool gangKai = 4;
      public boolean hasGangKai() {
        return result.hasGangKai();
      }
      public boolean getGangKai() {
        return result.getGangKai();
      }
      public Builder setGangKai(boolean value) {
        result.hasGangKai = true;
        result.gangKai_ = value;
        return this;
      }
      public Builder clearGangKai() {
        result.hasGangKai = false;
        result.gangKai_ = false;
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.OverMethod overMethod = 5;
      public boolean hasOverMethod() {
        return result.hasOverMethod();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.OverMethod getOverMethod() {
        return result.getOverMethod();
      }
      public Builder setOverMethod(com.randioo.mahjong_public_server.protocol.Entity.OverMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOverMethod = true;
        result.overMethod_ = value;
        return this;
      }
      public Builder clearOverMethod() {
        result.hasOverMethod = false;
        result.overMethod_ = com.randioo.mahjong_public_server.protocol.Entity.OverMethod.OVER_LOSS;
        return this;
      }
      
      // optional int32 roundScore = 6;
      public boolean hasRoundScore() {
        return result.hasRoundScore();
      }
      public int getRoundScore() {
        return result.getRoundScore();
      }
      public Builder setRoundScore(int value) {
        result.hasRoundScore = true;
        result.roundScore_ = value;
        return this;
      }
      public Builder clearRoundScore() {
        result.hasRoundScore = false;
        result.roundScore_ = 0;
        return this;
      }
      
      // optional int32 mingGangScore = 7;
      public boolean hasMingGangScore() {
        return result.hasMingGangScore();
      }
      public int getMingGangScore() {
        return result.getMingGangScore();
      }
      public Builder setMingGangScore(int value) {
        result.hasMingGangScore = true;
        result.mingGangScore_ = value;
        return this;
      }
      public Builder clearMingGangScore() {
        result.hasMingGangScore = false;
        result.mingGangScore_ = 0;
        return this;
      }
      
      // optional int32 mingGangCount = 8;
      public boolean hasMingGangCount() {
        return result.hasMingGangCount();
      }
      public int getMingGangCount() {
        return result.getMingGangCount();
      }
      public Builder setMingGangCount(int value) {
        result.hasMingGangCount = true;
        result.mingGangCount_ = value;
        return this;
      }
      public Builder clearMingGangCount() {
        result.hasMingGangCount = false;
        result.mingGangCount_ = 0;
        return this;
      }
      
      // optional int32 darkGangScore = 9;
      public boolean hasDarkGangScore() {
        return result.hasDarkGangScore();
      }
      public int getDarkGangScore() {
        return result.getDarkGangScore();
      }
      public Builder setDarkGangScore(int value) {
        result.hasDarkGangScore = true;
        result.darkGangScore_ = value;
        return this;
      }
      public Builder clearDarkGangScore() {
        result.hasDarkGangScore = false;
        result.darkGangScore_ = 0;
        return this;
      }
      
      // optional int32 darkGangCount = 10;
      public boolean hasDarkGangCount() {
        return result.hasDarkGangCount();
      }
      public int getDarkGangCount() {
        return result.getDarkGangCount();
      }
      public Builder setDarkGangCount(int value) {
        result.hasDarkGangCount = true;
        result.darkGangCount_ = value;
        return this;
      }
      public Builder clearDarkGangCount() {
        result.hasDarkGangCount = false;
        result.darkGangCount_ = 0;
        return this;
      }
      
      // optional int32 huangFan = 11;
      public boolean hasHuangFan() {
        return result.hasHuangFan();
      }
      public int getHuangFan() {
        return result.getHuangFan();
      }
      public Builder setHuangFan(int value) {
        result.hasHuangFan = true;
        result.huangFan_ = value;
        return this;
      }
      public Builder clearHuangFan() {
        result.hasHuangFan = false;
        result.huangFan_ = 0;
        return this;
      }
      
      // optional int32 moScore = 12;
      public boolean hasMoScore() {
        return result.hasMoScore();
      }
      public int getMoScore() {
        return result.getMoScore();
      }
      public Builder setMoScore(int value) {
        result.hasMoScore = true;
        result.moScore_ = value;
        return this;
      }
      public Builder clearMoScore() {
        result.hasMoScore = false;
        result.moScore_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.RoleRoundOverInfoData)
    }
    
    static {
      defaultInstance = new RoleRoundOverInfoData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.RoleRoundOverInfoData)
  }
  
  public static final class RoleGameOverInfoData extends
      com.google.protobuf.GeneratedMessage {
    // Use RoleGameOverInfoData.newBuilder() to construct.
    private RoleGameOverInfoData() {
      initFields();
    }
    private RoleGameOverInfoData(boolean noInit) {}
    
    private static final RoleGameOverInfoData defaultInstance;
    public static RoleGameOverInfoData getDefaultInstance() {
      return defaultInstance;
    }
    
    public RoleGameOverInfoData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoleGameOverInfoData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoleGameOverInfoData_fieldAccessorTable;
    }
    
    // optional .com.randioo.mahjong_public_server.protocol.GameRoleData gameRoleData = 1;
    public static final int GAMEROLEDATA_FIELD_NUMBER = 1;
    private boolean hasGameRoleData;
    private com.randioo.mahjong_public_server.protocol.Entity.GameRoleData gameRoleData_;
    public boolean hasGameRoleData() { return hasGameRoleData; }
    public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData getGameRoleData() { return gameRoleData_; }
    
    // optional int32 huCount = 2;
    public static final int HUCOUNT_FIELD_NUMBER = 2;
    private boolean hasHuCount;
    private int huCount_ = 0;
    public boolean hasHuCount() { return hasHuCount; }
    public int getHuCount() { return huCount_; }
    
    // optional int32 moHuCount = 3;
    public static final int MOHUCOUNT_FIELD_NUMBER = 3;
    private boolean hasMoHuCount;
    private int moHuCount_ = 0;
    public boolean hasMoHuCount() { return hasMoHuCount; }
    public int getMoHuCount() { return moHuCount_; }
    
    // optional int32 zhuaHuCount = 4;
    public static final int ZHUAHUCOUNT_FIELD_NUMBER = 4;
    private boolean hasZhuaHuCount;
    private int zhuaHuCount_ = 0;
    public boolean hasZhuaHuCount() { return hasZhuaHuCount; }
    public int getZhuaHuCount() { return zhuaHuCount_; }
    
    // optional int32 dianChongCount = 5;
    public static final int DIANCHONGCOUNT_FIELD_NUMBER = 5;
    private boolean hasDianChongCount;
    private int dianChongCount_ = 0;
    public boolean hasDianChongCount() { return hasDianChongCount; }
    public int getDianChongCount() { return dianChongCount_; }
    
    // optional int32 gameScore = 6;
    public static final int GAMESCORE_FIELD_NUMBER = 6;
    private boolean hasGameScore;
    private int gameScore_ = 0;
    public boolean hasGameScore() { return hasGameScore; }
    public int getGameScore() { return gameScore_; }
    
    private void initFields() {
      gameRoleData_ = com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasGameRoleData()) {
        output.writeMessage(1, getGameRoleData());
      }
      if (hasHuCount()) {
        output.writeInt32(2, getHuCount());
      }
      if (hasMoHuCount()) {
        output.writeInt32(3, getMoHuCount());
      }
      if (hasZhuaHuCount()) {
        output.writeInt32(4, getZhuaHuCount());
      }
      if (hasDianChongCount()) {
        output.writeInt32(5, getDianChongCount());
      }
      if (hasGameScore()) {
        output.writeInt32(6, getGameScore());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasGameRoleData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getGameRoleData());
      }
      if (hasHuCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getHuCount());
      }
      if (hasMoHuCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getMoHuCount());
      }
      if (hasZhuaHuCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getZhuaHuCount());
      }
      if (hasDianChongCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getDianChongCount());
      }
      if (hasGameScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getGameScore());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.getDefaultInstance()) return this;
        if (other.hasGameRoleData()) {
          mergeGameRoleData(other.getGameRoleData());
        }
        if (other.hasHuCount()) {
          setHuCount(other.getHuCount());
        }
        if (other.hasMoHuCount()) {
          setMoHuCount(other.getMoHuCount());
        }
        if (other.hasZhuaHuCount()) {
          setZhuaHuCount(other.getZhuaHuCount());
        }
        if (other.hasDianChongCount()) {
          setDianChongCount(other.getDianChongCount());
        }
        if (other.hasGameScore()) {
          setGameScore(other.getGameScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.newBuilder();
              if (hasGameRoleData()) {
                subBuilder.mergeFrom(getGameRoleData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameRoleData(subBuilder.buildPartial());
              break;
            }
            case 16: {
              setHuCount(input.readInt32());
              break;
            }
            case 24: {
              setMoHuCount(input.readInt32());
              break;
            }
            case 32: {
              setZhuaHuCount(input.readInt32());
              break;
            }
            case 40: {
              setDianChongCount(input.readInt32());
              break;
            }
            case 48: {
              setGameScore(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional .com.randioo.mahjong_public_server.protocol.GameRoleData gameRoleData = 1;
      public boolean hasGameRoleData() {
        return result.hasGameRoleData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData getGameRoleData() {
        return result.getGameRoleData();
      }
      public Builder setGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGameRoleData = true;
        result.gameRoleData_ = value;
        return this;
      }
      public Builder setGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder builderForValue) {
        result.hasGameRoleData = true;
        result.gameRoleData_ = builderForValue.build();
        return this;
      }
      public Builder mergeGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData value) {
        if (result.hasGameRoleData() &&
            result.gameRoleData_ != com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance()) {
          result.gameRoleData_ =
            com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.newBuilder(result.gameRoleData_).mergeFrom(value).buildPartial();
        } else {
          result.gameRoleData_ = value;
        }
        result.hasGameRoleData = true;
        return this;
      }
      public Builder clearGameRoleData() {
        result.hasGameRoleData = false;
        result.gameRoleData_ = com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.getDefaultInstance();
        return this;
      }
      
      // optional int32 huCount = 2;
      public boolean hasHuCount() {
        return result.hasHuCount();
      }
      public int getHuCount() {
        return result.getHuCount();
      }
      public Builder setHuCount(int value) {
        result.hasHuCount = true;
        result.huCount_ = value;
        return this;
      }
      public Builder clearHuCount() {
        result.hasHuCount = false;
        result.huCount_ = 0;
        return this;
      }
      
      // optional int32 moHuCount = 3;
      public boolean hasMoHuCount() {
        return result.hasMoHuCount();
      }
      public int getMoHuCount() {
        return result.getMoHuCount();
      }
      public Builder setMoHuCount(int value) {
        result.hasMoHuCount = true;
        result.moHuCount_ = value;
        return this;
      }
      public Builder clearMoHuCount() {
        result.hasMoHuCount = false;
        result.moHuCount_ = 0;
        return this;
      }
      
      // optional int32 zhuaHuCount = 4;
      public boolean hasZhuaHuCount() {
        return result.hasZhuaHuCount();
      }
      public int getZhuaHuCount() {
        return result.getZhuaHuCount();
      }
      public Builder setZhuaHuCount(int value) {
        result.hasZhuaHuCount = true;
        result.zhuaHuCount_ = value;
        return this;
      }
      public Builder clearZhuaHuCount() {
        result.hasZhuaHuCount = false;
        result.zhuaHuCount_ = 0;
        return this;
      }
      
      // optional int32 dianChongCount = 5;
      public boolean hasDianChongCount() {
        return result.hasDianChongCount();
      }
      public int getDianChongCount() {
        return result.getDianChongCount();
      }
      public Builder setDianChongCount(int value) {
        result.hasDianChongCount = true;
        result.dianChongCount_ = value;
        return this;
      }
      public Builder clearDianChongCount() {
        result.hasDianChongCount = false;
        result.dianChongCount_ = 0;
        return this;
      }
      
      // optional int32 gameScore = 6;
      public boolean hasGameScore() {
        return result.hasGameScore();
      }
      public int getGameScore() {
        return result.getGameScore();
      }
      public Builder setGameScore(int value) {
        result.hasGameScore = true;
        result.gameScore_ = value;
        return this;
      }
      public Builder clearGameScore() {
        result.hasGameScore = false;
        result.gameScore_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.RoleGameOverInfoData)
    }
    
    static {
      defaultInstance = new RoleGameOverInfoData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.RoleGameOverInfoData)
  }
  
  public static final class RoundCardsData extends
      com.google.protobuf.GeneratedMessage {
    // Use RoundCardsData.newBuilder() to construct.
    private RoundCardsData() {
      initFields();
    }
    private RoundCardsData(boolean noInit) {}
    
    private static final RoundCardsData defaultInstance;
    public static RoundCardsData getDefaultInstance() {
      return defaultInstance;
    }
    
    public RoundCardsData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoundCardsData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoundCardsData_fieldAccessorTable;
    }
    
    // optional int32 huCard = 1;
    public static final int HUCARD_FIELD_NUMBER = 1;
    private boolean hasHuCard;
    private int huCard_ = 0;
    public boolean hasHuCard() { return hasHuCard; }
    public int getHuCard() { return huCard_; }
    
    // repeated int32 handCards = 2;
    public static final int HANDCARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> handCards_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getHandCardsList() {
      return handCards_;
    }
    public int getHandCardsCount() { return handCards_.size(); }
    public int getHandCards(int index) {
      return handCards_.get(index);
    }
    
    // optional int32 touchCard = 3;
    public static final int TOUCHCARD_FIELD_NUMBER = 3;
    private boolean hasTouchCard;
    private int touchCard_ = 0;
    public boolean hasTouchCard() { return hasTouchCard; }
    public int getTouchCard() { return touchCard_; }
    
    // optional int32 targetSeat = 4;
    public static final int TARGETSEAT_FIELD_NUMBER = 4;
    private boolean hasTargetSeat;
    private int targetSeat_ = 0;
    public boolean hasTargetSeat() { return hasTargetSeat; }
    public int getTargetSeat() { return targetSeat_; }
    
    // repeated .com.randioo.mahjong_public_server.protocol.CardListData cardListData = 5;
    public static final int CARDLISTDATA_FIELD_NUMBER = 5;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CardListData> cardListData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CardListData> getCardListDataList() {
      return cardListData_;
    }
    public int getCardListDataCount() { return cardListData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.CardListData getCardListData(int index) {
      return cardListData_.get(index);
    }
    
    // repeated int32 flower = 6;
    public static final int FLOWER_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> flower_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getFlowerList() {
      return flower_;
    }
    public int getFlowerCount() { return flower_.size(); }
    public int getFlower(int index) {
      return flower_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasHuCard()) {
        output.writeInt32(1, getHuCard());
      }
      for (int element : getHandCardsList()) {
        output.writeInt32(2, element);
      }
      if (hasTouchCard()) {
        output.writeInt32(3, getTouchCard());
      }
      if (hasTargetSeat()) {
        output.writeInt32(4, getTargetSeat());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.CardListData element : getCardListDataList()) {
        output.writeMessage(5, element);
      }
      for (int element : getFlowerList()) {
        output.writeInt32(6, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasHuCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getHuCard());
      }
      {
        int dataSize = 0;
        for (int element : getHandCardsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getHandCardsList().size();
      }
      if (hasTouchCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getTouchCard());
      }
      if (hasTargetSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getTargetSeat());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.CardListData element : getCardListDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      {
        int dataSize = 0;
        for (int element : getFlowerList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFlowerList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.handCards_ != java.util.Collections.EMPTY_LIST) {
          result.handCards_ =
            java.util.Collections.unmodifiableList(result.handCards_);
        }
        if (result.cardListData_ != java.util.Collections.EMPTY_LIST) {
          result.cardListData_ =
            java.util.Collections.unmodifiableList(result.cardListData_);
        }
        if (result.flower_ != java.util.Collections.EMPTY_LIST) {
          result.flower_ =
            java.util.Collections.unmodifiableList(result.flower_);
        }
        com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance()) return this;
        if (other.hasHuCard()) {
          setHuCard(other.getHuCard());
        }
        if (!other.handCards_.isEmpty()) {
          if (result.handCards_.isEmpty()) {
            result.handCards_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.handCards_.addAll(other.handCards_);
        }
        if (other.hasTouchCard()) {
          setTouchCard(other.getTouchCard());
        }
        if (other.hasTargetSeat()) {
          setTargetSeat(other.getTargetSeat());
        }
        if (!other.cardListData_.isEmpty()) {
          if (result.cardListData_.isEmpty()) {
            result.cardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CardListData>();
          }
          result.cardListData_.addAll(other.cardListData_);
        }
        if (!other.flower_.isEmpty()) {
          if (result.flower_.isEmpty()) {
            result.flower_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.flower_.addAll(other.flower_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setHuCard(input.readInt32());
              break;
            }
            case 16: {
              addHandCards(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addHandCards(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              setTouchCard(input.readInt32());
              break;
            }
            case 32: {
              setTargetSeat(input.readInt32());
              break;
            }
            case 42: {
              com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.CardListData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCardListData(subBuilder.buildPartial());
              break;
            }
            case 48: {
              addFlower(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addFlower(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // optional int32 huCard = 1;
      public boolean hasHuCard() {
        return result.hasHuCard();
      }
      public int getHuCard() {
        return result.getHuCard();
      }
      public Builder setHuCard(int value) {
        result.hasHuCard = true;
        result.huCard_ = value;
        return this;
      }
      public Builder clearHuCard() {
        result.hasHuCard = false;
        result.huCard_ = 0;
        return this;
      }
      
      // repeated int32 handCards = 2;
      public java.util.List<java.lang.Integer> getHandCardsList() {
        return java.util.Collections.unmodifiableList(result.handCards_);
      }
      public int getHandCardsCount() {
        return result.getHandCardsCount();
      }
      public int getHandCards(int index) {
        return result.getHandCards(index);
      }
      public Builder setHandCards(int index, int value) {
        result.handCards_.set(index, value);
        return this;
      }
      public Builder addHandCards(int value) {
        if (result.handCards_.isEmpty()) {
          result.handCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.handCards_.add(value);
        return this;
      }
      public Builder addAllHandCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.handCards_.isEmpty()) {
          result.handCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.handCards_);
        return this;
      }
      public Builder clearHandCards() {
        result.handCards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 touchCard = 3;
      public boolean hasTouchCard() {
        return result.hasTouchCard();
      }
      public int getTouchCard() {
        return result.getTouchCard();
      }
      public Builder setTouchCard(int value) {
        result.hasTouchCard = true;
        result.touchCard_ = value;
        return this;
      }
      public Builder clearTouchCard() {
        result.hasTouchCard = false;
        result.touchCard_ = 0;
        return this;
      }
      
      // optional int32 targetSeat = 4;
      public boolean hasTargetSeat() {
        return result.hasTargetSeat();
      }
      public int getTargetSeat() {
        return result.getTargetSeat();
      }
      public Builder setTargetSeat(int value) {
        result.hasTargetSeat = true;
        result.targetSeat_ = value;
        return this;
      }
      public Builder clearTargetSeat() {
        result.hasTargetSeat = false;
        result.targetSeat_ = 0;
        return this;
      }
      
      // repeated .com.randioo.mahjong_public_server.protocol.CardListData cardListData = 5;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CardListData> getCardListDataList() {
        return java.util.Collections.unmodifiableList(result.cardListData_);
      }
      public int getCardListDataCount() {
        return result.getCardListDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CardListData getCardListData(int index) {
        return result.getCardListData(index);
      }
      public Builder setCardListData(int index, com.randioo.mahjong_public_server.protocol.Entity.CardListData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.cardListData_.set(index, value);
        return this;
      }
      public Builder setCardListData(int index, com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder builderForValue) {
        result.cardListData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.cardListData_.isEmpty()) {
          result.cardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CardListData>();
        }
        result.cardListData_.add(value);
        return this;
      }
      public Builder addCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder builderForValue) {
        if (result.cardListData_.isEmpty()) {
          result.cardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CardListData>();
        }
        result.cardListData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCardListData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.CardListData> values) {
        if (result.cardListData_.isEmpty()) {
          result.cardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CardListData>();
        }
        super.addAll(values, result.cardListData_);
        return this;
      }
      public Builder clearCardListData() {
        result.cardListData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 flower = 6;
      public java.util.List<java.lang.Integer> getFlowerList() {
        return java.util.Collections.unmodifiableList(result.flower_);
      }
      public int getFlowerCount() {
        return result.getFlowerCount();
      }
      public int getFlower(int index) {
        return result.getFlower(index);
      }
      public Builder setFlower(int index, int value) {
        result.flower_.set(index, value);
        return this;
      }
      public Builder addFlower(int value) {
        if (result.flower_.isEmpty()) {
          result.flower_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.flower_.add(value);
        return this;
      }
      public Builder addAllFlower(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.flower_.isEmpty()) {
          result.flower_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.flower_);
        return this;
      }
      public Builder clearFlower() {
        result.flower_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.RoundCardsData)
    }
    
    static {
      defaultInstance = new RoundCardsData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.RoundCardsData)
  }
  
  public static final class RecommandPai extends
      com.google.protobuf.GeneratedMessage {
    // Use RecommandPai.newBuilder() to construct.
    private RecommandPai() {
      initFields();
    }
    private RecommandPai(boolean noInit) {}
    
    private static final RecommandPai defaultInstance;
    public static RecommandPai getDefaultInstance() {
      return defaultInstance;
    }
    
    public RecommandPai getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RecommandPai_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RecommandPai_fieldAccessorTable;
    }
    
    // repeated int32 pai = 1;
    public static final int PAI_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> pai_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getPaiList() {
      return pai_;
    }
    public int getPaiCount() { return pai_.size(); }
    public int getPai(int index) {
      return pai_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int element : getPaiList()) {
        output.writeInt32(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (int element : getPaiList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getPaiList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RecommandPai parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.RecommandPai prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.RecommandPai result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.RecommandPai();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.RecommandPai internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.RecommandPai();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RecommandPai getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RecommandPai build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.RecommandPai buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RecommandPai buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.pai_ != java.util.Collections.EMPTY_LIST) {
          result.pai_ =
            java.util.Collections.unmodifiableList(result.pai_);
        }
        com.randioo.mahjong_public_server.protocol.Entity.RecommandPai returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.RecommandPai) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.RecommandPai)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.RecommandPai other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.getDefaultInstance()) return this;
        if (!other.pai_.isEmpty()) {
          if (result.pai_.isEmpty()) {
            result.pai_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.pai_.addAll(other.pai_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              addPai(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addPai(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // repeated int32 pai = 1;
      public java.util.List<java.lang.Integer> getPaiList() {
        return java.util.Collections.unmodifiableList(result.pai_);
      }
      public int getPaiCount() {
        return result.getPaiCount();
      }
      public int getPai(int index) {
        return result.getPai(index);
      }
      public Builder setPai(int index, int value) {
        result.pai_.set(index, value);
        return this;
      }
      public Builder addPai(int value) {
        if (result.pai_.isEmpty()) {
          result.pai_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.pai_.add(value);
        return this;
      }
      public Builder addAllPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.pai_.isEmpty()) {
          result.pai_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.pai_);
        return this;
      }
      public Builder clearPai() {
        result.pai_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.RecommandPai)
    }
    
    static {
      defaultInstance = new RecommandPai(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.RecommandPai)
  }
  
  public static final class GameData extends
      com.google.protobuf.GeneratedMessage {
    // Use GameData.newBuilder() to construct.
    private GameData() {
      initFields();
    }
    private GameData(boolean noInit) {}
    
    private static final GameData defaultInstance;
    public static GameData getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameData_fieldAccessorTable;
    }
    
    // optional string roomId = 1;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private boolean hasRoomId;
    private java.lang.String roomId_ = "";
    public boolean hasRoomId() { return hasRoomId; }
    public java.lang.String getRoomId() { return roomId_; }
    
    // repeated .com.randioo.mahjong_public_server.protocol.GameRoleData gameRoleData = 2;
    public static final int GAMEROLEDATA_FIELD_NUMBER = 2;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.GameRoleData> gameRoleData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.GameRoleData> getGameRoleDataList() {
      return gameRoleData_;
    }
    public int getGameRoleDataCount() { return gameRoleData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData getGameRoleData(int index) {
      return gameRoleData_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasRoomId()) {
        output.writeString(1, getRoomId());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.GameRoleData element : getGameRoleDataList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasRoomId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getRoomId());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.GameRoleData element : getGameRoleDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.GameData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.GameData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.GameData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.GameData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.GameData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.GameData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.GameData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.gameRoleData_ != java.util.Collections.EMPTY_LIST) {
          result.gameRoleData_ =
            java.util.Collections.unmodifiableList(result.gameRoleData_);
        }
        com.randioo.mahjong_public_server.protocol.Entity.GameData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.GameData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.GameData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.GameData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.GameData.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (!other.gameRoleData_.isEmpty()) {
          if (result.gameRoleData_.isEmpty()) {
            result.gameRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.GameRoleData>();
          }
          result.gameRoleData_.addAll(other.gameRoleData_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setRoomId(input.readString());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addGameRoleData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional string roomId = 1;
      public boolean hasRoomId() {
        return result.hasRoomId();
      }
      public java.lang.String getRoomId() {
        return result.getRoomId();
      }
      public Builder setRoomId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder clearRoomId() {
        result.hasRoomId = false;
        result.roomId_ = getDefaultInstance().getRoomId();
        return this;
      }
      
      // repeated .com.randioo.mahjong_public_server.protocol.GameRoleData gameRoleData = 2;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.GameRoleData> getGameRoleDataList() {
        return java.util.Collections.unmodifiableList(result.gameRoleData_);
      }
      public int getGameRoleDataCount() {
        return result.getGameRoleDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameRoleData getGameRoleData(int index) {
        return result.getGameRoleData(index);
      }
      public Builder setGameRoleData(int index, com.randioo.mahjong_public_server.protocol.Entity.GameRoleData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.gameRoleData_.set(index, value);
        return this;
      }
      public Builder setGameRoleData(int index, com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder builderForValue) {
        result.gameRoleData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.gameRoleData_.isEmpty()) {
          result.gameRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.GameRoleData>();
        }
        result.gameRoleData_.add(value);
        return this;
      }
      public Builder addGameRoleData(com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder builderForValue) {
        if (result.gameRoleData_.isEmpty()) {
          result.gameRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.GameRoleData>();
        }
        result.gameRoleData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllGameRoleData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.GameRoleData> values) {
        if (result.gameRoleData_.isEmpty()) {
          result.gameRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.GameRoleData>();
        }
        super.addAll(values, result.gameRoleData_);
        return this;
      }
      public Builder clearGameRoleData() {
        result.gameRoleData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.GameData)
    }
    
    static {
      defaultInstance = new GameData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.GameData)
  }
  
  public static final class AudienceData extends
      com.google.protobuf.GeneratedMessage {
    // Use AudienceData.newBuilder() to construct.
    private AudienceData() {
      initFields();
    }
    private AudienceData(boolean noInit) {}
    
    private static final AudienceData defaultInstance;
    public static AudienceData getDefaultInstance() {
      return defaultInstance;
    }
    
    public AudienceData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_AudienceData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_AudienceData_fieldAccessorTable;
    }
    
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional int32 score = 2;
    public static final int SCORE_FIELD_NUMBER = 2;
    private boolean hasScore;
    private int score_ = 0;
    public boolean hasScore() { return hasScore; }
    public int getScore() { return score_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasScore()) {
        output.writeInt32(2, getScore());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getScore());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.AudienceData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.AudienceData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.AudienceData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.AudienceData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.AudienceData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.AudienceData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.AudienceData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.AudienceData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.AudienceData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.AudienceData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.AudienceData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.AudienceData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.AudienceData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Entity.AudienceData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.AudienceData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.AudienceData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.AudienceData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.AudienceData.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 16: {
              setScore(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional int32 score = 2;
      public boolean hasScore() {
        return result.hasScore();
      }
      public int getScore() {
        return result.getScore();
      }
      public Builder setScore(int value) {
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder clearScore() {
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.AudienceData)
    }
    
    static {
      defaultInstance = new AudienceData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.AudienceData)
  }
  
  public static final class RoundVideoData extends
      com.google.protobuf.GeneratedMessage {
    // Use RoundVideoData.newBuilder() to construct.
    private RoundVideoData() {
      initFields();
    }
    private RoundVideoData(boolean noInit) {}
    
    private static final RoundVideoData defaultInstance;
    public static RoundVideoData getDefaultInstance() {
      return defaultInstance;
    }
    
    public RoundVideoData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoundVideoData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_RoundVideoData_fieldAccessorTable;
    }
    
    // repeated bytes sc = 1;
    public static final int SC_FIELD_NUMBER = 1;
    private java.util.List<com.google.protobuf.ByteString> sc_ =
      java.util.Collections.emptyList();
    public java.util.List<com.google.protobuf.ByteString> getScList() {
      return sc_;
    }
    public int getScCount() { return sc_.size(); }
    public com.google.protobuf.ByteString getSc(int index) {
      return sc_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.google.protobuf.ByteString element : getScList()) {
        output.writeBytes(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (com.google.protobuf.ByteString element : getScList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getScList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.sc_ != java.util.Collections.EMPTY_LIST) {
          result.sc_ =
            java.util.Collections.unmodifiableList(result.sc_);
        }
        com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.getDefaultInstance()) return this;
        if (!other.sc_.isEmpty()) {
          if (result.sc_.isEmpty()) {
            result.sc_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
          }
          result.sc_.addAll(other.sc_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              addSc(input.readBytes());
              break;
            }
          }
        }
      }
      
      
      // repeated bytes sc = 1;
      public java.util.List<com.google.protobuf.ByteString> getScList() {
        return java.util.Collections.unmodifiableList(result.sc_);
      }
      public int getScCount() {
        return result.getScCount();
      }
      public com.google.protobuf.ByteString getSc(int index) {
        return result.getSc(index);
      }
      public Builder setSc(int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.sc_.set(index, value);
        return this;
      }
      public Builder addSc(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.sc_.isEmpty()) {
          result.sc_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
        }
        result.sc_.add(value);
        return this;
      }
      public Builder addAllSc(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        if (result.sc_.isEmpty()) {
          result.sc_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
        }
        super.addAll(values, result.sc_);
        return this;
      }
      public Builder clearSc() {
        result.sc_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.RoundVideoData)
    }
    
    static {
      defaultInstance = new RoundVideoData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.RoundVideoData)
  }
  
  public static final class GameVideoData extends
      com.google.protobuf.GeneratedMessage {
    // Use GameVideoData.newBuilder() to construct.
    private GameVideoData() {
      initFields();
    }
    private GameVideoData(boolean noInit) {}
    
    private static final GameVideoData defaultInstance;
    public static GameVideoData getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameVideoData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameVideoData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Entity.internal_static_com_randioo_mahjong_public_server_protocol_GameVideoData_fieldAccessorTable;
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.RoundVideoData roundVideoData = 1;
    public static final int ROUNDVIDEODATA_FIELD_NUMBER = 1;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData> roundVideoData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData> getRoundVideoDataList() {
      return roundVideoData_;
    }
    public int getRoundVideoDataCount() { return roundVideoData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData getRoundVideoData(int index) {
      return roundVideoData_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData element : getRoundVideoDataList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData element : getRoundVideoDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Entity.GameVideoData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Entity.GameVideoData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Entity.GameVideoData result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Entity.GameVideoData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Entity.GameVideoData();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Entity.GameVideoData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Entity.GameVideoData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameVideoData.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameVideoData getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Entity.GameVideoData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameVideoData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Entity.GameVideoData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Entity.GameVideoData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.roundVideoData_ != java.util.Collections.EMPTY_LIST) {
          result.roundVideoData_ =
            java.util.Collections.unmodifiableList(result.roundVideoData_);
        }
        com.randioo.mahjong_public_server.protocol.Entity.GameVideoData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Entity.GameVideoData) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Entity.GameVideoData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Entity.GameVideoData other) {
        if (other == com.randioo.mahjong_public_server.protocol.Entity.GameVideoData.getDefaultInstance()) return this;
        if (!other.roundVideoData_.isEmpty()) {
          if (result.roundVideoData_.isEmpty()) {
            result.roundVideoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData>();
          }
          result.roundVideoData_.addAll(other.roundVideoData_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRoundVideoData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.randioo.mahjong_public_server.protocol.RoundVideoData roundVideoData = 1;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData> getRoundVideoDataList() {
        return java.util.Collections.unmodifiableList(result.roundVideoData_);
      }
      public int getRoundVideoDataCount() {
        return result.getRoundVideoDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData getRoundVideoData(int index) {
        return result.getRoundVideoData(index);
      }
      public Builder setRoundVideoData(int index, com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.roundVideoData_.set(index, value);
        return this;
      }
      public Builder setRoundVideoData(int index, com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.Builder builderForValue) {
        result.roundVideoData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRoundVideoData(com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.roundVideoData_.isEmpty()) {
          result.roundVideoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData>();
        }
        result.roundVideoData_.add(value);
        return this;
      }
      public Builder addRoundVideoData(com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.Builder builderForValue) {
        if (result.roundVideoData_.isEmpty()) {
          result.roundVideoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData>();
        }
        result.roundVideoData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRoundVideoData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData> values) {
        if (result.roundVideoData_.isEmpty()) {
          result.roundVideoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData>();
        }
        super.addAll(values, result.roundVideoData_);
        return this;
      }
      public Builder clearRoundVideoData() {
        result.roundVideoData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.GameVideoData)
    }
    
    static {
      defaultInstance = new GameVideoData(true);
      com.randioo.mahjong_public_server.protocol.Entity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.GameVideoData)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_RoleData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_RoleData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_GameConfigData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_GameConfigData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_PaiNum_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_PaiNum_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_ScoreData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_ScoreData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_Record_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_Record_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_GameRoleData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_GameRoleData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_CallCardListData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_CallCardListData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_CardListData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_CardListData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_CallHuData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_CallHuData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_RoleRoundOverInfoData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_RoleRoundOverInfoData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_RoleGameOverInfoData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_RoleGameOverInfoData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_RoundCardsData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_RoundCardsData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_RecommandPai_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_RecommandPai_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_GameData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_GameData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_AudienceData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_AudienceData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_RoundVideoData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_RoundVideoData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_GameVideoData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_GameVideoData_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014Entity.proto\022*com.randioo.mahjong_publ" +
      "ic_server.protocol\"Z\n\010RoleData\022\016\n\006roleId" +
      "\030\001 \001(\005\022\016\n\006roomId\030\002 \001(\t\022\r\n\005point\030\003 \001(\005\022\013\n" +
      "\003sex\030\004 \001(\005\022\022\n\nserverTime\030\005 \001(\005\"\253\003\n\016GameC" +
      "onfigData\022\020\n\010raceType\030\001 \001(\005\022\022\n\nroundCoun" +
      "t\030\002 \001(\005\022\025\n\rminStartScore\030\003 \001(\005\022\013\n\003hua\030\004 " +
      "\001(\005\022\021\n\tgangScore\030\005 \001(\005\022\023\n\013baidaZhuaHu\030\006 " +
      "\001(\010\022\021\n\tbaida4win\030\007 \001(\010\022\020\n\010flyCount\030\010 \001(\005" +
      "\022\r\n\005limit\030\t \001(\005\022\022\n\nisHuangFan\030\n \001(\010\022\r\n\005i" +
      "sFly\030\013 \001(\010\022\020\n\010flyScore\030\014 \001(\005\022\020\n\010flyValue",
      "\030\r \003(\005\022c\n\016gameOverMethod\030\016 \001(\0162:.com.ran" +
      "dioo.mahjong_public_server.protocol.Game" +
      "OverMethod:\017GAME_OVER_ROUND\022\017\n\007endTime\030\017" +
      " \001(\t\022\017\n\007cardNum\030\020 \001(\005\022\023\n\010maxCount\030\021 \001(\005:" +
      "\0014\022\020\n\010roomCard\030\022 \001(\005\"#\n\006PaiNum\022\014\n\004seat\030\001" +
      " \001(\005\022\013\n\003num\030\003 \001(\005\"(\n\tScoreData\022\014\n\004seat\030\001" +
      " \001(\005\022\r\n\005score\030\002 \001(\005\"#\n\006Record\022\014\n\004seat\030\001 " +
      "\001(\005\022\013\n\003pai\030\002 \003(\005\"\264\001\n\014GameRoleData\022\022\n\ngam" +
      "eRoleId\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004seat\030\003 \001(" +
      "\005\022\r\n\005ready\030\004 \001(\010\022\022\n\nheadImgUrl\030\005 \001(\t\022\r\n\005",
      "money\030\006 \001(\005\022\r\n\005point\030\007 \001(\005\022\013\n\003sex\030\010 \001(\005\022" +
      "\016\n\006online\030\t \001(\010\022\026\n\016platformRoleId\030\n \001(\t\"" +
      "r\n\020CallCardListData\022\016\n\006callId\030\001 \001(\005\022N\n\014c" +
      "ardListData\030\002 \001(\01328.com.randioo.mahjong_" +
      "public_server.protocol.CardListData\"\224\001\n\014" +
      "CardListData\022N\n\014cardListType\030\001 \001(\01628.com" +
      ".randioo.mahjong_public_server.protocol." +
      "CardListType\022\014\n\004card\030\002 \001(\005\022\022\n\ntargetSeat" +
      "\030\003 \001(\005\022\022\n\ntargetCard\030\004 \001(\005\"h\n\nCallHuData" +
      "\022\016\n\006callId\030\001 \001(\005\022J\n\006huData\030\002 \001(\0132:.com.r",
      "andioo.mahjong_public_server.protocol.Ro" +
      "undCardsData\"\275\003\n\025RoleRoundOverInfoData\022N" +
      "\n\014gameRoleData\030\001 \001(\01328.com.randioo.mahjo" +
      "ng_public_server.protocol.GameRoleData\022R" +
      "\n\016roundCardsData\030\002 \001(\0132:.com.randioo.mah" +
      "jong_public_server.protocol.RoundCardsDa" +
      "ta\022\020\n\010minScore\030\003 \001(\005\022\017\n\007gangKai\030\004 \001(\010\022J\n" +
      "\noverMethod\030\005 \001(\01626.com.randioo.mahjong_" +
      "public_server.protocol.OverMethod\022\022\n\nrou" +
      "ndScore\030\006 \001(\005\022\025\n\rmingGangScore\030\007 \001(\005\022\025\n\r",
      "mingGangCount\030\010 \001(\005\022\025\n\rdarkGangScore\030\t \001" +
      "(\005\022\025\n\rdarkGangCount\030\n \001(\005\022\020\n\010huangFan\030\013 " +
      "\001(\005\022\017\n\007moScore\030\014 \001(\005\"\312\001\n\024RoleGameOverInf" +
      "oData\022N\n\014gameRoleData\030\001 \001(\01328.com.randio" +
      "o.mahjong_public_server.protocol.GameRol" +
      "eData\022\017\n\007huCount\030\002 \001(\005\022\021\n\tmoHuCount\030\003 \001(" +
      "\005\022\023\n\013zhuaHuCount\030\004 \001(\005\022\026\n\016dianChongCount" +
      "\030\005 \001(\005\022\021\n\tgameScore\030\006 \001(\005\"\272\001\n\016RoundCards" +
      "Data\022\016\n\006huCard\030\001 \001(\005\022\021\n\thandCards\030\002 \003(\005\022" +
      "\021\n\ttouchCard\030\003 \001(\005\022\022\n\ntargetSeat\030\004 \001(\005\022N",
      "\n\014cardListData\030\005 \003(\01328.com.randioo.mahjo" +
      "ng_public_server.protocol.CardListData\022\016" +
      "\n\006flower\030\006 \003(\005\"\033\n\014RecommandPai\022\013\n\003pai\030\001 " +
      "\003(\005\"j\n\010GameData\022\016\n\006roomId\030\001 \001(\t\022N\n\014gameR" +
      "oleData\030\002 \003(\01328.com.randioo.mahjong_publ" +
      "ic_server.protocol.GameRoleData\"+\n\014Audie" +
      "nceData\022\014\n\004name\030\001 \001(\t\022\r\n\005score\030\002 \001(\005\"\034\n\016" +
      "RoundVideoData\022\n\n\002sc\030\001 \003(\014\"c\n\rGameVideoD" +
      "ata\022R\n\016roundVideoData\030\001 \003(\0132:.com.randio" +
      "o.mahjong_public_server.protocol.RoundVi",
      "deoData*9\n\016GameOverMethod\022\022\n\016GAME_OVER_T" +
      "IME\020\001\022\023\n\017GAME_OVER_ROUND\020\002*5\n\010GameType\022\023" +
      "\n\017GAME_TYPE_MATCH\020\001\022\024\n\020GAME_TYPE_FRIEND\020" +
      "\002*M\n\tGameState\022\026\n\022GAME_STATE_PREPARE\020\001\022\024" +
      "\n\020GAME_START_START\020\002\022\022\n\016GAME_START_END\020\003" +
      "*\231\001\n\014CardListType\022\026\n\022CARD_LIST_TYPE_CHI\020" +
      "\001\022\027\n\023CARD_LIST_TYPE_PENG\020\002\022\035\n\031CARD_LIST_" +
      "TYPE_GANG_LIGHT\020\003\022\034\n\030CARD_LIST_TYPE_GANG" +
      "_DARK\020\004\022\033\n\027CARD_LIST_TYPE_GANG_ADD\020\005*H\n\n" +
      "OverMethod\022\r\n\tOVER_LOSS\020\000\022\016\n\nOVER_CHONG\020",
      "\001\022\016\n\nOVER_MO_HU\020\002\022\013\n\007OVER_HU\020\003*D\n\022FightV" +
      "oteApplyExit\022\r\n\tVOTE_IDLE\020\000\022\016\n\nVOTE_AGRE" +
      "E\020\001\022\017\n\013VOTE_REJECT\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_randioo_mahjong_public_server_protocol_RoleData_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_randioo_mahjong_public_server_protocol_RoleData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_RoleData_descriptor,
              new java.lang.String[] { "RoleId", "RoomId", "Point", "Sex", "ServerTime", },
              com.randioo.mahjong_public_server.protocol.Entity.RoleData.class,
              com.randioo.mahjong_public_server.protocol.Entity.RoleData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_GameConfigData_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_randioo_mahjong_public_server_protocol_GameConfigData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_GameConfigData_descriptor,
              new java.lang.String[] { "RaceType", "RoundCount", "MinStartScore", "Hua", "GangScore", "BaidaZhuaHu", "Baida4Win", "FlyCount", "Limit", "IsHuangFan", "IsFly", "FlyScore", "FlyValue", "GameOverMethod", "EndTime", "CardNum", "MaxCount", "RoomCard", },
              com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.class,
              com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_PaiNum_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_randioo_mahjong_public_server_protocol_PaiNum_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_PaiNum_descriptor,
              new java.lang.String[] { "Seat", "Num", },
              com.randioo.mahjong_public_server.protocol.Entity.PaiNum.class,
              com.randioo.mahjong_public_server.protocol.Entity.PaiNum.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_ScoreData_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_randioo_mahjong_public_server_protocol_ScoreData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_ScoreData_descriptor,
              new java.lang.String[] { "Seat", "Score", },
              com.randioo.mahjong_public_server.protocol.Entity.ScoreData.class,
              com.randioo.mahjong_public_server.protocol.Entity.ScoreData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_Record_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_randioo_mahjong_public_server_protocol_Record_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_Record_descriptor,
              new java.lang.String[] { "Seat", "Pai", },
              com.randioo.mahjong_public_server.protocol.Entity.Record.class,
              com.randioo.mahjong_public_server.protocol.Entity.Record.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_GameRoleData_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_com_randioo_mahjong_public_server_protocol_GameRoleData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_GameRoleData_descriptor,
              new java.lang.String[] { "GameRoleId", "Name", "Seat", "Ready", "HeadImgUrl", "Money", "Point", "Sex", "Online", "PlatformRoleId", },
              com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.class,
              com.randioo.mahjong_public_server.protocol.Entity.GameRoleData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_CallCardListData_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_com_randioo_mahjong_public_server_protocol_CallCardListData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_CallCardListData_descriptor,
              new java.lang.String[] { "CallId", "CardListData", },
              com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.class,
              com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_CardListData_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_com_randioo_mahjong_public_server_protocol_CardListData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_CardListData_descriptor,
              new java.lang.String[] { "CardListType", "Card", "TargetSeat", "TargetCard", },
              com.randioo.mahjong_public_server.protocol.Entity.CardListData.class,
              com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_CallHuData_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_com_randioo_mahjong_public_server_protocol_CallHuData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_CallHuData_descriptor,
              new java.lang.String[] { "CallId", "HuData", },
              com.randioo.mahjong_public_server.protocol.Entity.CallHuData.class,
              com.randioo.mahjong_public_server.protocol.Entity.CallHuData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_RoleRoundOverInfoData_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_com_randioo_mahjong_public_server_protocol_RoleRoundOverInfoData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_RoleRoundOverInfoData_descriptor,
              new java.lang.String[] { "GameRoleData", "RoundCardsData", "MinScore", "GangKai", "OverMethod", "RoundScore", "MingGangScore", "MingGangCount", "DarkGangScore", "DarkGangCount", "HuangFan", "MoScore", },
              com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.class,
              com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_RoleGameOverInfoData_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_com_randioo_mahjong_public_server_protocol_RoleGameOverInfoData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_RoleGameOverInfoData_descriptor,
              new java.lang.String[] { "GameRoleData", "HuCount", "MoHuCount", "ZhuaHuCount", "DianChongCount", "GameScore", },
              com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.class,
              com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_RoundCardsData_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_com_randioo_mahjong_public_server_protocol_RoundCardsData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_RoundCardsData_descriptor,
              new java.lang.String[] { "HuCard", "HandCards", "TouchCard", "TargetSeat", "CardListData", "Flower", },
              com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.class,
              com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_RecommandPai_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_com_randioo_mahjong_public_server_protocol_RecommandPai_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_RecommandPai_descriptor,
              new java.lang.String[] { "Pai", },
              com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.class,
              com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_GameData_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_com_randioo_mahjong_public_server_protocol_GameData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_GameData_descriptor,
              new java.lang.String[] { "RoomId", "GameRoleData", },
              com.randioo.mahjong_public_server.protocol.Entity.GameData.class,
              com.randioo.mahjong_public_server.protocol.Entity.GameData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_AudienceData_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_com_randioo_mahjong_public_server_protocol_AudienceData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_AudienceData_descriptor,
              new java.lang.String[] { "Name", "Score", },
              com.randioo.mahjong_public_server.protocol.Entity.AudienceData.class,
              com.randioo.mahjong_public_server.protocol.Entity.AudienceData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_RoundVideoData_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_com_randioo_mahjong_public_server_protocol_RoundVideoData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_RoundVideoData_descriptor,
              new java.lang.String[] { "Sc", },
              com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.class,
              com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_GameVideoData_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_com_randioo_mahjong_public_server_protocol_GameVideoData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_GameVideoData_descriptor,
              new java.lang.String[] { "RoundVideoData", },
              com.randioo.mahjong_public_server.protocol.Entity.GameVideoData.class,
              com.randioo.mahjong_public_server.protocol.Entity.GameVideoData.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
