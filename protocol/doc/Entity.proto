package com.randioo.mahjong_public_server.protocol;

message RoleData{
	optional int32 roleId = 1;
	optional string roomId = 2;
	optional int32 point = 3;
	optional int32 sex = 4;
	optional int32 serverTime = 5;

	/*optional string name = 2;
	optional int32 money = 3;
	optional int32 volume = 4;
	optional int32 musicVolume = 5;
	optional string headImgUrl = 6;
	optional int32 randiooMoney = 7;*/
}

message GameConfigData{
	optional int32 raceType = 1; 
	optional int32 roundCount = 2;//局数
	optional int32 minStartScore = 3; //底分
	optional int32 hua = 4; // 花
	optional int32 gangScore = 5;//杠的分数
	optional bool baidaZhuaHu = 6;//红中在手是否可以抓胡
	optional bool baida4win=7;//四红中(白搭)获胜
	optional int32 flyCount =8; //苍蝇数量
	optional int32 limit = 9; // 封顶
	optional bool isHuangFan = 10;// 荒番
	optional bool isFly = 11;// 飞苍蝇
	optional int32 flyScore = 12; //飞苍蝇分数
	repeated int32 flyValue = 13;//苍蝇的值
	optional GameOverMethod gameOverMethod = 14[default=GAME_OVER_ROUND];//游戏结束方式
	optional string endTime = 15; //结束时间
	optional int32 cardNum = 16; // 房卡数量
	optional int32 maxCount = 17 [default=4];//默认值为4
	optional int32 roomCard = 18;//房卡
}
/**游戏结束的方式*/
enum GameOverMethod{
	GAME_OVER_TIME=1;
	GAME_OVER_ROUND=2;
}
message PaiNum{
	optional int32 seat = 1;
	optional int32 num = 3;
}

message ScoreData{
	optional int32 seat = 1;
	optional int32 score = 2;
}

message Record{
	optional int32 seat = 1;
	repeated int32 pai = 2;
}

enum GameType{
	GAME_TYPE_MATCH = 1;
	GAME_TYPE_FRIEND = 2;
}

message GameRoleData{
	optional string gameRoleId = 1;
	optional string name = 2;
	optional int32 seat = 3;
	optional bool ready = 4;
	optional string headImgUrl = 5;
	optional int32 money = 6;
	optional int32 point = 7;
	optional int32 sex = 8;
	optional bool online = 9;	
	optional string platformRoleId = 10;
}

enum GameState{
	GAME_STATE_PREPARE = 1;
	GAME_START_START = 2;
	GAME_START_END = 3;
}

message CallCardListData{
	optional int32 callId = 1;
	optional CardListData cardListData = 2;
}

message CardListData{
	optional CardListType cardListType = 1;
	optional int32 card = 2;
	optional int32 targetSeat = 3;
	optional int32 targetCard = 4;
}

enum CardListType{
	CARD_LIST_TYPE_CHI = 1;
	CARD_LIST_TYPE_PENG = 2;
	CARD_LIST_TYPE_GANG_LIGHT = 3;
	CARD_LIST_TYPE_GANG_DARK = 4;
	CARD_LIST_TYPE_GANG_ADD = 5;
}

message CallHuData{
	optional int32 callId = 1;
	optional RoundCardsData huData = 2;
}

message RoleRoundOverInfoData{
	optional GameRoleData gameRoleData = 1;
	optional RoundCardsData roundCardsData = 2;
	optional int32 minScore = 3;
	optional bool gangKai = 4;
	optional OverMethod overMethod = 5;
	optional int32 roundScore = 6;
	optional int32 mingGangScore = 7;
	optional int32 mingGangCount = 8;
	optional int32 darkGangScore = 9;
	optional int32 darkGangCount = 10;
	optional int32 huangFan = 11;
	optional int32 moScore = 12;
}

enum OverMethod{
	OVER_LOSS = 0;
	OVER_CHONG = 1;
	OVER_MO_HU =2;
	OVER_HU = 3;
}

message RoleGameOverInfoData{
	optional GameRoleData gameRoleData = 1;
	optional int32 huCount = 2;
	optional int32 moHuCount = 3;
	optional int32 zhuaHuCount = 4;
	optional int32 dianChongCount = 5;
	optional int32 gameScore = 6;
}

message RoundCardsData{	
	optional int32 huCard = 1;
	repeated int32 handCards = 2;	
	optional int32 touchCard = 3;
	optional int32 targetSeat = 4;
	repeated CardListData cardListData = 5;
	repeated int32 flower = 6;
}

message RecommandPai{
	repeated int32 pai = 1; 
}

message GameData{
	optional string roomId = 1;
	repeated GameRoleData gameRoleData = 2;
}

message AudienceData{
	optional string name = 1;
	optional int32 score = 2;
}

enum FightVoteApplyExit{
	VOTE_IDLE = 0;
	VOTE_AGREE = 1;
	VOTE_REJECT = 2;
}

message RoundVideoData{	
	repeated bytes sc = 1;
}
message GameVideoData{	
	repeated RoundVideoData roundVideoData = 1;
}